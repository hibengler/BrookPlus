/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors 
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file address_translation.br
  \brief A sample showing large vector sizes are available via 
  address translation.

  Address translation modifies in the backend the location of data points to
  fit inside the available memory spaces when a dimension is larger than
  the normally allowed size. By passing in the -A flag to the compiler,
  the compiler will translate the addresses that are opaque to the
  programmer, but allow vector and matrix sizes that are larger than 
  the limits.

  \i largeVectorSum, takes two large vectors and adds them together. The 
  output is stored to a third large vector. Because of address translation,
  there is no need for the programmer to treat the vectors any different.
 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>
static int retval = 0;

/**
 *
 * \brief		Simple Brook kernel to sum two
 *				1D streams
 *
 * \param a		Input stream
 * \param b		Input stream
 * \param c		Output stream containing sum of inputs
 *						
 */
kernel void largeVectorSum(float a<>, float b<>, out float c<>)
{
    c = a + b;
}

/**
 *
 * \brief				Compute elementwise sum of two 1D arrays
 *
 * \param a				Input array
 * \param b				Input array
 * \param c				Array of sums 
 * \param len			Length of input arrays
 *						
 */
void largeVectorSum_cpu(float* a, float* b, float* c, int len)
{
    int y;
    for (y = 0; y < len; ++y)
    {
        c[y] = a[y] + b[y];
    }
}


int main(int argc, char** argv)
{
    struct infoRec cmd;
    float* input  = NULL;
    float* output = NULL;
    unsigned int i,Length;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Length = cmd.Width * cmd.Height;

	/////////////////////////////////////////////////////////////////////////
	// Allocate memory
	/////////////////////////////////////////////////////////////////////////
    if (!(input = allocate_mat_f(cmd.Height, cmd.Width)))
    {
        retval = -1;
        goto cleanup;

    }
    if (!(output = allocate_mat_f(cmd.Height, cmd.Width)))
    {
        retval = -1;
        goto cleanup;
    }
    fill_mat_f(input, cmd.Height, cmd.Width, Length, RANDOM);

	/////////////////////////////////////////////////////////////////////////
	// Print input data
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Input Matrix: ", "%2.3lf ", input, cmd.Width, cmd.Height);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Input Matrix :", "%2.3lf ", input, 1, cmd.Height);
    }
    
	/////////////////////////////////////////////////////////////////////////
    // Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
		unsigned int Length = cmd.Height * cmd.Width;
		float inputStream<Length>;
		float outputStream<Length>;

		// Record GPU Total Time 
		Start(0);
		for (i = 0; i < cmd.Iterations; ++i)
		{
			// Write to stream 
			streamRead(inputStream, input);

			// Run the brook program 
			largeVectorSum(inputStream, inputStream, outputStream);

			// Write data back from stream 
			streamWrite(outputStream, output);
		}
		Stop(0);
    }

	// Print results if requested
    if (cmd.Verbose)
    {
        print_mat_f("Output Matrix: ", "%2.3lf ", output, cmd.Height, cmd.Width);

    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Output Matrix: ", "%2.3lf ", output, 1, cmd.Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information if requested
	/////////////////////////////////////////////////////////////////////////
	if (cmd.Timing)
    {
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time");
		printf(	"%-8d%-8d%-16d%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        float* cpu;

        if (!(cpu = allocate_mat_f(cmd.Height, cmd.Width)))
        {
            printf("Failure in allocating cpu memory\n");
            retval = -1;
            goto cleanup;
        }

		printf("-e Verify correct output.\n");
		printf("Performing address translation on CPU ... ");

		largeVectorSum_cpu(input, input, cpu, cmd.Height * cmd.Width);

		printf("Done\n");

		// Compare CPU and GPU results for correctness
		res += compare_mat_f(output, cpu, cmd.Height, cmd.Width);
        if (res)
        {
            printf("%s: Failed!\n\n", argv[0]);
            retval = -1;
        }
        else
        {
            printf("%s: Passed!\n\n", argv[0]);
            retval = 0;
        }

        free(cpu);
	}

	/////////////////////////////////////////////////////////////////////////
	// Clean up
	/////////////////////////////////////////////////////////////////////////
cleanup:
    if (input)
    {
        free(input);
    }
    if (output)
    {
        free(output);
    }

	if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }
    return retval;
}
