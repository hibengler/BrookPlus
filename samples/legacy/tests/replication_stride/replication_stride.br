/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors 
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file replication_stride.br
  \brief Tests the shrinking and expanding of data to fit the output stream

 Tests the automatic replication and stride of kernel arguments. The output
 stream always determines the number of operations performed. The elements
 from the input streams are either skipped or repeated to compensate for
 the differing size of the output stream. The stream arguments must always
 be an integer multiple of each other.
 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

static int retval = 0;

/**
 * \brief			A simple copy kernel
 *					Replication and stride 
 *					automatically handled 
 *
 * \param input		Input stream
 * \param output	Output stream
 *
*/
kernel void copy(float input<>, out float output<>)
{
    output = input;
}

/**
 * \brief			Reference CPU implementation
 *					for replication 
 *
 * \param input		Input array
 * \param output	Output array
 * \param length	Length of input array
 * \param num		Replication width, repeat after every num elements
 *
*/
void replication_cpu(float* input, float* output, int length, int num)
{
    int y;
    for (y = 0; y < length; ++y)
    {
        int x;
        for (x = 0; x < num; ++x)
        {
            int index = y * num + x;
            output[index] = input[y];
        }
    }
}

/**
 * \brief			Reference CPU implementation
 *					for stride 
 *
 * \param input		Input array
 * \param output	Output array
 * \param length	Length of input array
 * \param num		Stride, copy every num-th element
 *
*/
void stride_cpu(float* input, float* output, int length, int num)
{
    int x = 0, y;
    for (y = 0; y < length; y += num, ++x)
    {
        output[x] = input[y];
    }
}

int main(int argc, char** argv)
{
    float *data[3]   = {NULL};
    float *data2D[2] = {NULL};
    float *rsdata    =  NULL;
    float *srdata    =  NULL;
    float *ssdata    =  NULL;
    struct infoRec cmd;
    unsigned int Height, Width, Length, i;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    if (cmd.Height > 64 || cmd.Width > 64)
    {
        if (!cmd.Quiet)
        {
            fprintf(stderr, "Width/Height is too large for this sample, please use sizes <= 64\n");
        }
        else
        {
            printf("%s: Passed!\n", argv[0]);
        }
        return retval;
    }
    Height = cmd.Height;
    Width = cmd.Width;
    Length = Height * Width;

	/////////////////////////////////////////////////////////////////////////
    // Allocate memory
   	/////////////////////////////////////////////////////////////////////////
    for (i = 0; i < 2; ++i)
    {
        data[i] = allocate_mat_f(1, Length);
        data2D[i] = allocate_mat_f(Length, Length);
        if (!data[i] || !data2D[i])
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
            goto cleanup;
        }
    }
    if (!(data[2] = allocate_mat_f(1, Length)))
    {
        fprintf(stderr, "Error: Memory Allocation.\n");
        retval = -1;
        goto cleanup;
    }
    if (!(rsdata = allocate_mat_f(Length, Width)))
    {
        retval = -1;
        goto cleanup;
    }
    if (!(srdata = allocate_mat_f(Height, Length)))
    {
        retval = -1;
        goto cleanup;
    }
    if (!(ssdata = allocate_mat_f(Height, Width)))
    {
        retval = -1;
        goto cleanup;
    }


    fill_mat_f(data[0], 1, Length, Length, RANDOM);
    fill_mat_f((float*)data2D[0], Length, Length, Length, RANDOM);

	/////////////////////////////////////////////////////////////////////////
    // Print input data 
   	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Input Data 1D: ", "%2.3lf ", data[0], 1, Length);
        print_mat_f("Input Data 2D: ", "%2.3lf ", (float*)data2D[0], Length, Length);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Input Data 1D: ", "%2.3lf ", data[0], 1, Width);
        print_mat_f("Input Data 2D: ", "%2.3lf ", (float*)data2D[0], 1, Length);
    }

   	/////////////////////////////////////////////////////////////////////////
    // Brook code block
   	/////////////////////////////////////////////////////////////////////////
    {
        // One dimensional tests output
        float routput<Length>;	// replication
        float soutput<Width>;	// stride
        // One dimensional tests input
        float rinput<Width>;
        float sinput<Length>;
        // Two dimensional tests input
        float rrinput<Height, Width>;
        float rsinput<Height, Length>;
        float srinput<Length, Width>;
        float ssinput<Length, Length>;
        // Two dimensional tests output
        float rroutput<Length, Length>;		// replicate both dimensions
        float rsoutput<Length, Width>;		// replicate first, stride second
        float sroutput<Height, Length>;		// stride first, replicate second
        float ssoutput<Height, Width>;		// stride both dimensions

		// Record GPU Total time
		Start(0);
        for (i = 0; i < cmd.Iterations; ++i)
        {
			// Write to stream 
			streamRead(rinput, data[0]);
			streamRead(sinput, data[0]);
			streamRead(rrinput, data2D[0]);
			streamRead(ssinput, data2D[0]);
			streamRead(rsinput, data2D[0]);
			streamRead(srinput, data2D[0]);


			// Run the brook program 
			copy(sinput, soutput);	// Handle stride/decimation
			copy(rinput, routput);	// Handle replication/expansion
			copy(rrinput, rroutput);
			copy(rsinput, rsoutput);
			copy(srinput, sroutput);
			copy(ssinput, ssoutput);

			// Write data back from stream 
			streamWrite(routput, data[1]);
			streamWrite(soutput, data[2]);
			streamWrite(rroutput, data2D[1]);
			streamWrite(sroutput, srdata);
			streamWrite(rsoutput, rsdata);
			streamWrite(ssoutput, ssdata);
        }
        Stop(0);
    }

   	/////////////////////////////////////////////////////////////////////////
    // Print results if requested
   	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Output Data 1: ", "%2.3lf ", data[2], 1, Width);
        print_mat_f("Output Data 2: ", "%2.3lf ", data[1], 1, Length);
        print_mat_f("Stride/Stride Data: ", "%2.3lf ", (float*)data2D[1], Length, Length);
        print_mat_f("Stride/Replic Data: ", "%2.3lf ", (float*)srdata, Length, Width);
        print_mat_f("Replic/Stride Data: ", "%2.3lf ", (float*)rsdata, Height, Length);
        print_mat_f("Replic/Replic Data: ", "%2.3lf ", (float*)ssdata, Height, Width);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Output Data 1: ", "%2.3lf ", data[2], 1, Width);
        print_mat_f("Output Data 2: ", "%2.3lf ", data[1], 1, Width);
        print_mat_f("Stride/Stride Data: ", "%2.3lf ", (float*)data2D[1], 1, Length);
        print_mat_f("Stride/Replic Data: ", "%2.3lf ", (float*)srdata, 1, Width);
        print_mat_f("Replic/Stride Data: ", "%2.3lf ", (float*)rsdata, 1, Length);
        print_mat_f("Replic/Replic Data: ", "%2.3lf ", (float*)ssdata, 1, Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time");
		printf( "%-8d%-8d%-16d%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        float *cpudata  = NULL;
        float *cpudata2 = NULL;
        if (!(cpudata = allocate_mat_f(1, Length)))
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
            goto cpu_cleanup;
        }
        if (!(cpudata2 = allocate_mat_f(1, Width)))
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
            free(cpudata);
            goto cpu_cleanup;
        }

		printf("-e Verify correct output.\n");

        stride_cpu(data[0], cpudata2, Length, Length/Width);
        replication_cpu(data[0], cpudata, Width, Length/Width);
        res += compare_mat_f(data[1], cpudata, 1, Length);
        res += compare_mat_f(data[2], cpudata2, 1, Width);
        if (res)
        {
            printf("%s: Failed!\n", argv[0]);
            retval = -1;
        }
        else
        {
            printf("%s: Passed!\n", argv[0]);
            retval = 0;
        }

	/////////////////////////////////////////////////////////////////////////
	// Clean up
   	/////////////////////////////////////////////////////////////////////////
cpu_cleanup:
        if (cpudata)
        {
            free(cpudata);
        }
        if (cpudata2)
        {
            free(cpudata2);
        }
    }
cleanup:
    for (i = 0; i < 2; ++i)
    {
        if (data[i])
        {
            free(data[i]);
        }
        if (data2D[i])
        {
            free(data2D[i]);
        }
    }
    if (data[2])
    {
        free(data[i]);
    }
    if (rsdata)
    {
        free(rsdata);
    }
    if (srdata)
    {
        free(srdata);
    }
    if (ssdata)
    {
        free(ssdata);
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

	return retval;
}
