/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors 
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file indexof.br
  \brief A brook test of the built-in operator 'indexof.'
  
  This test confirms that the invariant 'indexof' works as both a stream
  argument and a gather argument. Fetching from a gather argument with the
  index of the stream argument should produce the same values as the
  stream argument.
 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

static int retval = 0;

/**
    \param d_prime The input data stream to get indices from
    \param d       Data matrix to use indices on
    \param e       The output stream of float4
    \brief Create's output float4 based on the indices stored in the input stream
 */
kernel void indexof_advanced(float d_prime<>, float d[][], out float4 e<>)
{
   e = float4(d[indexof(d_prime).y][indexof(d_prime).x],
               d[indexof(d_prime).y][indexof(d_prime).x],
               d[indexof(d_prime).x][indexof(d_prime).y],
               d[indexof(e).x][indexof(d_prime).y]);
}

/**
   \param a Input stream storing indices
   \param b Output stream that gets the x value of a[indexof(a)]
   \brief Writes a to b using indexof operator
 */
kernel void indexof_simple(float a<>, out float b<>)
{
    b = (indexof(a)).x;
}

/**
   \param e output stream used in calculating index
   \brief outputs the matrix index of the output location
 */
kernel void indexof_output(out float e<>, float width)
{
    e = (indexof(e)).x + ((indexof(e)).y * width);
}

/**
   \param d Data matrix to use indices on
   \param e The output stream of float4's
   \brief C function that mimics \i indexof_advanced
   \sa indexof_advanced
 */
void indexof_advanced_cpu(float* d, float4 e[], unsigned int Height, unsigned int Width)
{
    unsigned int i;
    for (i = 0; i < Height; ++i)
    {
        unsigned int j;
        for (j = 0; j < Width; ++j)
        {
            int index = i * Width + j;
            e[index] = float4(d[i * Width + j],
                             d[i * Width + j],
                             d[j * Width + i],
                             d[j * Width + i]);
        }
    }
}

/**
 *
 * \brief C function that mimics \i indexof_simple
 *
 * \param a input stream storing data
 * \param b output stream storing results
 *
*/
void indexof_simple_cpu(float a[], float b[], unsigned int Height, unsigned int Width)
{
    unsigned int i;
    for (i = 0; i < Height; ++i)
    {
        unsigned int j;
        for (j = 0; j < Width; ++j)
        {
            int index = i * Width + j;
            b[index] = (float)(j);
        }
    }
}

/**
 *
 * \brief		Writes the index to the output position
 *
 * \param a		output matric
 *
*/
void indexof_output_cpu(float a[], unsigned int Height, unsigned int Width)
{
    unsigned int i;
    for (i = 0; i < Height; ++i)
    {
        unsigned int j;
        for (j = 0; j < Width; ++j)
        {
            int index = i * Width + j;
            a[index] = (float)(i * Width + j);
        }
    }
}

int main(int argc, char** argv)
{
    struct infoRec cmd;
    float *data[3]    = {NULL};
    float *output[2]  = {NULL};
    float4 *data_e[2] = {NULL};
    unsigned int Height, Width, i;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);

    // Width = Height = -x value; 
    // the indexof_advanced kernel is written in a way that 
    // "Width == Height" must hold to avoid out of bound access
    Width = cmd.Width;
    Height = cmd.Width;

	/////////////////////////////////////////////////////////////////////////
    // Allocate memory
   	/////////////////////////////////////////////////////////////////////////
    for (i = 0; i < 2; ++i)
    {
        output[i] = allocate_mat_f(Height, Width);
        data_e[i] = allocate_mat_f4(Height, Width);
        data[i] = allocate_mat_f(Height, Width);
        if (!data[i] || !data_e[i] || !output[i])
        {
            retval = -1;
            goto cleanup;
        }
    }
    if (!(data[2] = allocate_mat_f(Height, Width)))
    {
        retval = -1;
        goto cleanup;
    }

    fill_mat_f((float*)data[0], Height, Width, 100, RANDOM);

	/////////////////////////////////////////////////////////////////////////
	// Print input data 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Indexof Input:", "%2.5lf ", (float*)data[0] , Height, Width);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Indexof Input:", "%2.5lf ",(float*)data[0] , 1, Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
        float c<Height, Width>;
        float d<Height, Width>;
        float f<Height, Width>;
        float4 e<Height, Width>;

		// Record GPU Total time
        Start(0);
        for (i = 0; i < cmd.Iterations; ++i)
        {
			// Write to our stream
			streamRead(d, data[0]);

			// Run Brook programs
			indexof_simple(d, c);
			indexof_advanced(d, d, e);
			indexof_output(f, (float)Width);

			// Write data back from stream 
			streamWrite(c, data[1]);
			streamWrite(e, data_e[0]);
			streamWrite(f, output[0]);
        }
        Stop(0);
    }

   	/////////////////////////////////////////////////////////////////////////
	// Print results if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Simple Indexof Output:", "%2.5lf ",(float*)data[1], Height, Width);
        print_mat_f("Output Indexof Output:", "%2.5lf ",(float*)output[0], Height, Width);
        print_mat_f4("Advanced Indexof Output:", "%2.5lf ",(float4*)data_e[0], Height, Width);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Simple Indexof Output:", "%2.5lf ",(float*)data[1], 1, Width);
        print_mat_f("Output Indexof Output:", "%2.5lf ",(float*)output[0], 1, Width);
        print_mat_f4("Advanced Indexof Output:", "%2.5lf ",(float4*)data_e[0], 1, Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
		double time = GetElapsedTime(0);
		double compute_time = GetElapsedTime(1);
		printf(	"%-8s%-8s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time");
		printf( "%-8d%-8d%-16d%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;

		printf("-e Verify correct output.\n");

        indexof_simple_cpu(data[0],data[2], Height, Width);
        indexof_advanced_cpu((float*)data[0], data_e[1], Height, Width);
        indexof_output_cpu(output[1], Height, Width);
        res += compare_mat_f((float*)data[1], (float*)data[2], Height, Width);
        res += compare_mat_f((float*)output[0], (float*)output[1], Height, Width);
        res += compare_mat_f4((float4*)data_e[0], (float4*)data_e[1], Height, Width);

        if (res)
        {
            printf("%s: Failed!\n", argv[0]);
            retval = -1;
        }
        else
        {
            printf("%s: Passed!\n", argv[0]);
            retval = 0;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Clean up
	/////////////////////////////////////////////////////////////////////////
cleanup:
    for (i = 0; i < 2; ++i)
    {
        if (data_e[i])
        {
            free(data_e[i]);
        }
        if (data[i])
        {
            free(data[i]);
        }
        if (output[i])
        {
            free(output[i]);
        }
    }
    if (data[2])
    {
        free(data[2]);
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

	return retval;
}
