/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors 
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file input_output.br
  \brief Tests that show how to test the various input and output
  capabilities of brook.

  \i multiple_inputs tests that input variables could be more than one.

  \i multiple_output tests that writing to multiple output locations works.
 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

static int retval = 0;

/**
 *
 * \brief			Kernel with multiple input streams
 *
 * \param	a		Input stream
 * \param	b		Input array
 * \param	c		Input stream
 * \param	d		Output stream
 *
*/
kernel void multiple_inputs(float a<>, float b<>, float c<>, out float d<>)
{
    d = a * b + c;
}

/**
 *
 * \brief			Kernel with multiple output streams
 *
 * \param	a		Input stream
 * \param	b		Output array
 * \param	c		Output stream
 * \param	d		Output stream
 *
*/
kernel void multiple_outputs(float a<>, out float b<>, out float c<>, out float d<>)
{
    b = a * a + a;
    c = a * a - a;
    d = a * a * a;
}

/**
 *
 * \brief			Reference CPU program with 
 *					multiple input arrays
 *
 * \param	a		Input array
 * \param	b		Input array
 * \param	c		Input array
 * \param	d		Output array
 *
*/
void multiple_inputs_cpu(float* a, float* b, float*c, float* d, unsigned int Length)
{
    unsigned int i = 0;
    for (i = 0; i < Length; ++i)
    {
        d[i] = a[i] * b[i] + c[i];
    }
}

/**
 *
 * \brief			Reference CPU program with 
 *					multiple output arrays
 *
 * \param	a		Input array
 * \param	b		Input array
 * \param	c		Input array
 * \param	d		Output array
 *
*/
void multiple_outputs_cpu(float* a, float* b, float*c, float* d, unsigned int Length)
{
    unsigned int i = 0;
    for (i = 0; i < Length; ++i)
    {
        b[i] = a[i] * a[i] + a[i];
        c[i] = a[i] * a[i] - a[i];
        d[i] = a[i] * a[i] * a[i];
    }
}


int main(int argc, char** argv)
{
    float *input[4]  = {NULL};
    float *output[4] = {NULL};
    unsigned int Length, i, Width;
    struct infoRec cmd;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Width = cmd.Width;
    Length = cmd.Height * cmd.Width;

	/////////////////////////////////////////////////////////////////////////
    // Allocate memory
   	/////////////////////////////////////////////////////////////////////////
    for (i = 0; i < 4; ++i)
    {
        input[i] = allocate_mat_f(1, Length);
        output[i] = allocate_mat_f(1, Length);
        if (!input[i] || !output[i])
        {
            retval = -1;
            goto cleanup;
        }
    }
    fill_mat_f(input[0], 1, Length, Length, LINEAR);
    fill_mat_f(input[1], 1, Length, Length, ILINEAR);
    fill_mat_f(input[2], 1, Length, Length, RLINEAR);
    fill_mat_f(input[3], 1, Length, Length, RANDOM);

	/////////////////////////////////////////////////////////////////////////
	// Print input data 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Input Matrix 0: ", "%3.2lf ", input[0], 1, Length);
        print_mat_f("Input Matrix 1: ", "%3.2lf ", input[1], 1, Length);
        print_mat_f("Input Matrix 2: ", "%3.2lf ", input[2], 1, Length);
        print_mat_f("Input Matrix 3: ", "%3.2lf ", input[3], 1, Length);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Input Matrix 0: ", "%3.2lf ", input[0], 1, Width);
        print_mat_f("Input Matrix 1: ", "%3.2lf ", input[1], 1, Width);
        print_mat_f("Input Matrix 2: ", "%3.2lf ", input[2], 1, Width);
        print_mat_f("Input Matrix 3: ", "%3.2lf ", input[3], 1, Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Brook code block
	/////////////////////////////////////////////////////////////////////////
	{
        float a<Length>;
        float b<Length>;
        float c<Length>;
        float d<Length>;
        float e<Length>;
        float f<Length>;
        float g<Length>;

		// Record GPU Total time
        Start(0);
        cmd.Iterations = 1;
        for (i = 0; i < cmd.Iterations; ++i)
		{
			// Put write to stream 
			streamRead(a, input[0]);
			streamRead(b, input[1]);
			streamRead(c, input[2]);

			// Run the brook program 
			multiple_inputs(a, b, c, d);    // multiple inputs 
			multiple_outputs(d, e, f, g);   // multiple outputs 

			// Write data back from stream 
			streamWrite(d, output[0]);
			streamWrite(e, output[1]);
			streamWrite(f, output[2]);
			streamWrite(g, output[3]);
		}
        Stop(0);
    }

   	/////////////////////////////////////////////////////////////////////////
	// Print results if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_f("Output Matrix 1:", "%3.2lf ", output[0], 1, Length);
        print_mat_f("Output Matrix 2:", "%3.2lf ", output[1], 1, Length);
        print_mat_f("Output Matrix 3:", "%3.2lf ", output[2], 1, Length);
        print_mat_f("Output Matrix 4:", "%3.2lf ", output[3], 1, Length);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_f("Output Matrix 1:", "%3.2lf ", output[0], 1, Width);
        print_mat_f("Output Matrix 2:", "%3.2lf ", output[1], 1, Width);
        print_mat_f("Output Matrix 3:", "%3.2lf ", output[2], 1, Width);
        print_mat_f("Output Matrix 4:", "%3.2lf ", output[3], 1, Width);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time");
		printf( "%-8d%-8d%-16d%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        float *output_cpu[4];
        for (i = 0; i < 4; i=i+1)
        {
            if (!(output_cpu[i] = allocate_mat_f(1, Length)))
            {
                retval = -1;
                goto cleanup;
            }
        }

		printf("-e Verify correct output.\n");

        multiple_inputs_cpu(input[0], input[1], input[2], output_cpu[0], Length);
        multiple_outputs_cpu(output_cpu[0], output_cpu[1], output_cpu[2], output_cpu[3], Length);

        res += compare_mat_f(output_cpu[0], output[0], 1, Length);
        res += compare_mat_f(output_cpu[1], output[1], 1, Length);
        res += compare_mat_f(output_cpu[2], output[2], 1, Length);
        res += compare_mat_f(output_cpu[3], output[3], 1, Length);

        if (res)
        {
            printf("%s: Failed!\n", argv[0]);
            retval = -1;
        }
        else
        {
            printf("%s: Passed!\n", argv[0]);
            retval = 0;
        }
        for (i = 0; i < 4; i=i+1)
        {
            free(output_cpu[i]);
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Clean up
	/////////////////////////////////////////////////////////////////////////
cleanup:

    for (i = 0; i < 4; ++i)
    {
        if (output[i])
        {
            free(output[i]);
        }
        if (input[i])
        {
            free(input[i]);
        }
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

	return retval;
}
