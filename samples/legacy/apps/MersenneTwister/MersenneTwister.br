/****************************************************************************

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Advanced Micro Devices, Inc nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
****************************************************************************/
/*****************************************************************************
  \file MersenneTwister.br
  \brief A pseudo random number generation method.
   
   The commonly used variant of Mersenne Twister, MT19937 is implemented.
   Algorithm and pseudocode: http://en.wikipedia.org/wiki/Mersenne_twister

   The GPU implementation is SFMT implementation. The algorithm sfmt implementation
   could be found at :http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/index.html
 
 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

static int retval = 0;

/*
 *@brief Left shift
 */
kernel unsigned int4 
lshift128(unsigned int4 input, unsigned int shift)
{
    unsigned int invshift = 32u - shift;

    unsigned int4 output;

    output.x = input.x << shift;
    output.y = (input.y << shift) | (input.x >> invshift);
    output.z = (input.z << shift) | (input.y >> invshift);
    output.w = (input.w << shift) | (input.z >> invshift);

    return output;
}

/*
 *@brief Right shift
 */
kernel unsigned int4
rshift128(unsigned int4 input, unsigned int shift)
{
    unsigned int invshift = 32u - shift;

    unsigned int4 output;

    output.w = input.w >> shift;
    output.z = (input.z >> shift) | (input.w << invshift);
    output.y = (input.y >> shift) | (input.z << invshift);
    output.x = (input.x >> shift) | (input.y << invshift);

    return output;
}

/*
 *@brief The gpu kernel which is responsible for initializing the state
 *        array and then generation of random numbers from the state array.
 *
 *        Here one seed generates 8 random numbers.
 *
 *        It is prefered to have 2-D streams for input / output to avoid AT.
 */
kernel void 
generateNumber_gpu(unsigned int4 seedIn<>, out unsigned int4 A1<>, out unsigned int4 A2<>,
                                      out unsigned int4 A3<>, out unsigned int4 A4<>,
                                      out unsigned int4 A5<>, out unsigned int4 A6<>,
                                      out unsigned int4 A7<>, out unsigned int4 A8<>)
{
    unsigned int4 state1 = seedIn;
    unsigned int4 state2; 
    unsigned int4 state3; 
    unsigned int4 state4; 
    unsigned int4 state5;

    unsigned int4 mask4;
    unsigned int4 thirty4; 
    unsigned int4 one4;
    unsigned int4 two4;
    unsigned int4 three4;
    unsigned int4 four4;

    unsigned int4 r1;
    unsigned int4 r2;

    unsigned int4 a;
    unsigned int4 b; 

    unsigned int4 e; 
    unsigned int4 f; 
    
    unsigned int thirteen  = 13u;
    unsigned int fifteen = 15u;
    unsigned int shift = 8u * 3u;
    unsigned int zero = 0u;
    unsigned int one = 1u;
    unsigned int two = 2u;
    unsigned int three = 3u;
    unsigned int four = 4u;
    unsigned int thirty = 30u;

    unsigned int stateMask = 1812433253u;
    unsigned int mask11 = 0xfdff37ffu;
    unsigned int mask12 = 0xef7f3f7du;
    unsigned int mask13 = 0xff777b7du;
    unsigned int mask14 = 0x7ff7fb2fu;
    
    // Since there is no unsigned int constructor available in AMDHLSL,
    // The states are initialized with zero in the following manner.
    state2.x = zero;
    state2.y = zero;
    state2.z = zero;
    state2.w = zero;

    state3.x = zero;
    state3.y = zero;
    state3.z = zero;
    state3.w = zero;

    state4.x = zero;
    state4.y = zero;
    state4.z = zero;
    state4.w = zero;

    state5.x = zero;
    state5.y = zero;
    state5.z = zero;
    state5.w = zero;

    mask4.x = stateMask;
    mask4.y = stateMask;
    mask4.z = stateMask;
    mask4.w = stateMask;

    thirty4.x = thirty;
    thirty4.y = thirty;
    thirty4.z = thirty;
    thirty4.w = thirty;

    one4.x = one;
    one4.y = one;
    one4.z = one;
    one4.w = one;

    two4.x = two;
    two4.y = two;
    two4.z = two;
    two4.w = two;

    three4.x = three;
    three4.y = three;
    three4.z = three;
    three4.w = three;

    four4.x = four;
    four4.y = four;
    four4.z = four;
    four4.w = four;

    //Initializing states.
    state2 = mask4 * (state1 ^ (state1 >> thirty4)) + one4;
    state3 = mask4 * (state2 ^ (state2 >> thirty4)) + two4;
    state4 = mask4 * (state3 ^ (state3 >> thirty4)) + three4;
    state5 = mask4 * (state4 ^ (state4 >> thirty4)) + four4;

    r1 = state4;
    r2 = state5;
    
    a = state1;
    b = state3;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A1.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A1.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A1.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A1.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

    r1 = r2;
    r2 = A1;
    
    a = state2;
    b = state4;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A2.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A2.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A2.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A2.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

    r1 = r2;
    r2 = A2;

    a = state3;
    b = state5;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A3.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A3.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A3.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A3.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

    r1 = r2;
    r2 = A3;

    a = state4;
    b = state1;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A4.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A4.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A4.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A4.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

	
    r1 = r2;
    r2 = A4;

    a = state5;
    b = state2;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A5.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A5.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A5.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A5.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

    r1 = r2;
    r2 = A5;
    
    a = A1;
    b = A3;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A6.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A6.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A6.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A6.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

    r1 = r2;
    r2 = A6;

    a = A2;
    b = A4;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A7.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A7.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A7.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A7.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);

    r1 = r2;
    r2 = A7;

    a = A3;
    b = A5;
    
    e = lshift128(a, shift);
    f = rshift128(r1, shift);

    A8.x = a.x ^ e.x ^ ((b.x >> thirteen) & mask11) ^ f.x ^ (r2.x << fifteen);
    A8.y = a.y ^ e.y ^ ((b.y >> thirteen) & mask12) ^ f.y ^ (r2.y << fifteen);
    A8.z = a.z ^ e.z ^ ((b.z >> thirteen) & mask13) ^ f.z ^ (r2.z << fifteen);
    A8.w = a.w ^ e.w ^ ((b.w >> thirteen) & mask14) ^ f.w ^ (r2.w << fifteen);
}

/*
 *@brief Apply box mullar transformation on the generated float MT random numbers to 
 *        convert them to Gaussian Random numbers.
 *
 */
kernel void boxMullar_gpu(unsigned int4 streamIn1<>, unsigned int4 streamIn2<>,
                      unsigned int4 streamIn3<>, unsigned int4 streamIn4<>,
                      unsigned int4 streamIn5<>, unsigned int4 streamIn6<>,
                      unsigned int4 streamIn7<>, unsigned int4 streamIn8<>,
                      out float4 streamOut1<>, out float4 streamOut2<>,
                      out float4 streamOut3<>, out float4 streamOut4<>,
                      out float4 streamOut5<>, out float4 streamOut6<>,
                      out float4 streamOut7<>, out float4 streamOut8<>)
{
    float4 one4 = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float4 intMax = float4(4294967296.0f, 4294967296.0f, 4294967296.0f, 4294967296.0f);

    float4 PI = float4(3.14159265358979f, 3.14159265358979f, 3.14159265358979f, 3.14159265358979f);
    float4 two = float4(2.0f, 2.0f, 2.0f, 2.0f);
    float4 r; 
    float4 phi;
    
    float4 tempFloat1 = (float4)streamIn1 * one4 / intMax;
    float4 tempFloat2 = (float4)streamIn2 * one4 / intMax;
    float4 tempFloat3 = (float4)streamIn3 * one4 / intMax;
    float4 tempFloat4 = (float4)streamIn4 * one4 / intMax;
    float4 tempFloat5 = (float4)streamIn5 * one4 / intMax;
    float4 tempFloat6 = (float4)streamIn6 * one4 / intMax;
    float4 tempFloat7 = (float4)streamIn7 * one4 / intMax;
    float4 tempFloat8 = (float4)streamIn8 * one4 / intMax;

    // Applying Box Mullar Transformations.
    r = sqrt((-two) * log(tempFloat1));
    phi  = two * PI * tempFloat2;
    streamOut1 = r * cos(phi);
    streamOut2 = r * sin(phi);
    
    r = sqrt((-two) * log(tempFloat3));
    phi = two * PI * tempFloat4;
    streamOut3 = r * cos(phi);
    streamOut4 = r * sin(phi);

    r = sqrt((-two) * log(tempFloat5));
    phi = two * PI * tempFloat6;
    streamOut5 = r * cos(phi);
    streamOut6 = r * sin(phi);

    r = sqrt((-two) * log(tempFloat7));
    phi = two * PI * tempFloat8;
    streamOut7 = r * cos(phi);
    streamOut8 = r * sin(phi);
}

/*
 *@brief Initialize the states for CPU implementation
 *
 *        Here one seed generates 624 random numbers.
 */
void 
initializeGenerator_cpu(unsigned int seed, unsigned int *M, unsigned int N)
{
    unsigned int i = 0;
    M[0] = seed;
    for(i = 1; i < N; i++)
    {
        int tempVar = M[i-1] ^ (M[i-1] >> 30);
        M[i] = (1812433253 * tempVar + i);
        M[i] &= 0xffffffff;
    }
}

/*
 *@brief Generate random numbers for CPU implementation
 *        The state array is populated with the random numbers.
 */
void
generateNumber_cpu(unsigned int *M, unsigned int N)
{
    unsigned int i = 0;
    unsigned int y;
    for(; i < N; i++)
    {
        y = (M[i] >> 31) + ((M[(i + 1) % N] >> 1) >> 31);
        if(y % 2 == 0)
        {
            M[i] = M[(i + 397)% N] ^ (y >> 1);
        }
        else
        {
            M[i] = M[(i + 397)% N] ^ (y >> 1) ^ (2567483615u);
        }
    }
}

/*
 *@brief After the random number generation, extract the random numbers.
 */
void
extractNumber_cpu(unsigned int *M, unsigned int N)
{
    unsigned int y;
    unsigned int i;

    for(i = 0; i < N; i++)
    {
        y = M[i];
        y = y ^ (y >> 11);
        y = y ^ ((y << 7) & (2636928640u));
        y = y ^ ((y << 15) & (4022730752u));
        M[i] = y ^ (y >> 18);
    }
}

/*
 *@brief Box Mullar transformation is applied 
 *        on the generated random numbers
 */
void
boxMullar_cpu(unsigned int *M, float *BM, unsigned int N)
{
    unsigned int i;
    float PI = 3.14159265358979f;

    for(i = 0; i < N; )
    {
        float tempFloat1 = M[i] * 1.0f / 4294967296.0f;
        float tempFloat2 = M[i + 1] * 1.0f / 4294967296.0f;
    
        float r = sqrt((-2.0f) * log(tempFloat1));
        float phi  = 2.0f * PI * tempFloat2;

        BM[i] = r * cos(phi);
        BM[i + 1] = r * sin(phi);
        i += 2;
    }
}

int
main(int argc, char **argv)
{
    unsigned int i;

    unsigned int *seedArray = NULL;
    float *gpuResult =  NULL;
    float *cpuResult =  NULL;

    struct infoRec cmd;
    unsigned int Width;
    
    unsigned int dim1;
    unsigned int dim2;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	// 1 = GPU Compute Time
	// 2 = CPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0); 
	Setup(1);
	Setup(2);

    ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Width = cmd.Width;
    
    // Kernel operates on vectorized data. So the Width should be multiple of 4.
    if(Width < 4)
    {
        // Set the Width 4, the minimum width.
        Width = 4;
        dim1 = 1;
        dim2 = 1;
    }
    
    // Calculate approximate dim1, dim2 such that dim1 * dim2 * 4 comes around Width.
    else
    {
        unsigned int tempVar1 = (unsigned int)sqrt((double)Width);
        unsigned int tempVar2 = tempVar1 / 4;
        dim1 = tempVar2 * 4;
        dim2 = tempVar2;
    }

    // Reset the Width.
    Width = dim1 * dim2 * 4;
    
	/////////////////////////////////////////////////////////////////////////
    // Allocate memory 
	/////////////////////////////////////////////////////////////////////////
    seedArray = (unsigned int *)malloc(sizeof(unsigned int) * Width);
    gpuResult = (float *)malloc(sizeof(float) * Width * 8);

    if(!seedArray || !gpuResult)
    {
        printf("\nError in memory allocation\n");
        return -1;
    }

    for(i = 0; i < Width; ++i)
    {
        seedArray[i] = (unsigned int)rand();
    }
    
    // Print the modified Width.
    if(Width != cmd.Width)
    {
        printf("The modified width is : %u\n", Width);
    }

    // Warn user if she/he has entered the "-y" option that it is ignored.
    // However, this will fail to warn in case the value given equals the default
    // This is because here, the input size is just "number of options" - and thus
    // a one dimensional problem. So, we just need to take either "Width" or "Height"
    // and we chose "Width"
    if (cmd.Height != DEFAULT_HEIGHT) 
    {
        fprintf(stderr, "Warning: \n\t'Height' is not taken from the commandline.\n");
        fprintf(stderr, "\tIt is not used in this Brook sample.\n");
        fprintf(stderr, "\tPlease use 'Width' if you wish to change the number of seeds.\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
    // Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
        // Declare all input parameters as the 2-D streams.
        unsigned int4 seed <dim1, dim2>;  
        
        unsigned int4 rand1<dim1, dim2>;
        unsigned int4 rand2 <dim1, dim2>;
        unsigned int4 rand3 <dim1, dim2>;
        unsigned int4 rand4 <dim1, dim2>;
        unsigned int4 rand5 <dim1, dim2>;
        unsigned int4 rand6 <dim1, dim2>;
        unsigned int4 rand7 <dim1, dim2>;
        unsigned int4 rand8 <dim1, dim2>;

        float4 randOut1 <dim1, dim2>;
        float4 randOut2 <dim1, dim2>;
        float4 randOut3 <dim1, dim2>;
        float4 randOut4 <dim1, dim2>;
        float4 randOut5 <dim1, dim2>;
        float4 randOut6 <dim1, dim2>;
        float4 randOut7 <dim1, dim2>;
        float4 randOut8 <dim1, dim2>;

		// Record GPU Total time 
        Start(0);
	    for(i = 0; i < cmd.Iterations; ++i)
        {
	        // Read seed into seed stream.
		    streamRead(seed, seedArray);

			// Record GPU Compute time
			Start(1);
            // Mersenne Twister RNG kernel.
            generateNumber_gpu(seed, rand1, rand2, rand3, rand4, rand5, rand6, rand7, rand8);

            // Invoke Box Mullar Transformation kernel on generated MT random numbers.
            boxMullar_gpu(rand1, rand2, rand3, rand4, rand5, rand6, rand7, rand8,
                randOut1, randOut2, randOut3, randOut4, randOut5, randOut6, randOut7, randOut8);
			Stop(1);

			// Write data back from stream here
			streamWrite(randOut1, &gpuResult[0]);
			streamWrite(randOut2, &gpuResult[dim1 * dim2 * 4 * 1]);
			streamWrite(randOut3, &gpuResult[dim1 * dim2 * 4 * 2]);
			streamWrite(randOut4, &gpuResult[dim1 * dim2 * 4 * 3]);
			streamWrite(randOut5, &gpuResult[dim1 * dim2 * 4 * 4]);
			streamWrite(randOut6, &gpuResult[dim1 * dim2 * 4 * 5]);
			streamWrite(randOut7, &gpuResult[dim1 * dim2 * 4 * 6]);
			streamWrite(randOut8, &gpuResult[dim1 * dim2 * 4 * 7]);
        }
        Stop(0);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print results if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        printf("%u Random numbers generated\n", Width * 8);
        print_mat_f("", "%lf ", gpuResult, 1, Width*8);
    }
	else if (!cmd.Quiet)
	{
        printf("%u Random numbers generated\n", Width * 8);
        printf("Printing first 8\n");
        print_mat_f("", "%lf ", gpuResult, 1, 8);
	}

	/////////////////////////////////////////////////////////////////////////
	// Print timing information if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
		double time = GetElapsedTime(0);
		double compute_time = GetElapsedTime(1);
        double gpuPerformance = ((double)Width * 8)/ GetElapsedTime(0);

		printf(	"%-16s%-16s%-16s%-16s%-16s\n","Nums Generated","Iterations",
				"GPU Total Time","Compute Time", "Num/Sec");
		printf(	"%-16d%-16d%-16lf%-16lf%-16lf", Width*8, cmd.Iterations, time, 
				compute_time, gpuPerformance);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Compare performance with CPU if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Performance)
    {
		double cpu_time = 0.0;
		double gpu_time = 0.0;
        double cpuPerformance = 0;
        double gpuPerformance = 0;
		unsigned int j = 0;
		cpuResult = (float *)malloc(sizeof(float) * 624 * DEFAULT_WIDTH);
	    
		if(!cpuResult)
		{
			printf("\nError in memory allocation\n");
			return -1;
		}

		printf("-p Compare performance with CPU.\n");

		// Record CPU Total time
		Start(2);
		// Invoke the CPU implementation.
		for(i = 0; i < DEFAULT_WIDTH; i++)
		{
			static unsigned int M[624];
			static float BM[624];

			for(j = 0; j < cmd.Iterations; j++)
			{
				initializeGenerator_cpu(seedArray[i], M, 624);
				generateNumber_cpu(M, 624);
				extractNumber_cpu(M, 624);
				boxMullar_cpu(M, BM, 624);
				memcpy(&cpuResult[i * 624], &BM, 624 * sizeof(float));
			}
		}
		Stop(2);

		// Print CPU timing and speedup
		cpu_time = GetElapsedTime(2);
		gpu_time = GetElapsedTime(0);
        gpuPerformance = ((double)Width * 8)/ gpu_time;
        cpuPerformance = ((double)DEFAULT_WIDTH * 624)/ cpu_time;

		printf(	"%-16s%-16s%-16s%-16s\n","Iterations","CPU Num/Sec","GPU Num/Sec","Speedup");
		printf(	"%-16d%-16lf%-16lf%-16lf", cmd.Iterations, cpuPerformance, gpuPerformance, 
				gpuPerformance/cpuPerformance);
		printf("\n\n");
	}
    
    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

    return retval;
}
