/****************************************************************************

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Advanced Micro Devices, Inc nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file optimized_matmult.br
  \brief An optimized matrix multiplication algorithm using 8 MRT's with double precision
    
  Matrix multiplication algorithm using 8 MRT's to work on 8 seperate parts
  of the matrix in concurrently. Wikipedia entry:
  http://en.wikipedia.org/wiki/Matrix_multiplication

  The current implimentation breaks each 8x4 subblock into a 2x2 block
  and a 2x2 block and stored in row major order.

 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>
static int retval = 0;

/**
@brief      Divides matrix into parts

@param matrix       input matrix 
@param matrixParts  array of matrix parts
@param width        width of input matrix 
@param height       height of input matrix
@param parts        no of parts to be divided
*/
void divideMatrix(double* matrix, double* matrixParts[], unsigned int width, unsigned int height, unsigned int parts)
{
    unsigned int index = 0;
    unsigned int i = 0;
    for(i = 0; i < height; i++)
    {
        index = i % parts;
        memcpy(&matrixParts[index][(i / parts) * width], &matrix[i * width], width * sizeof(double));
    }
}

/**
@brief      Merges parts matrices into final matrix 

@param matrixParts  array of matrix parts
@param matrix       final matrix 
@param width        width of final matrix 
@param height       height of final matrix
@param parts        no of parts 
*/
void combineMatrix(double* matrixParts[], double* matrix, unsigned int width, unsigned int height, unsigned int parts)
{
    unsigned int i = 0;
    unsigned int j = 0;
    for(i = 0; i < height; i = i + parts)
    {
        for(j = 0; j < parts; j++)
        {
            memcpy(&matrix[(i + j) * width], &matrixParts[j][(i / parts) * width],  width * sizeof(double));
        }
    }
}

/**
@brief	8 MRT multiplication
*/
kernel void
optimized_matmult(int loopVar0,
        double2 A1[][], double2 A2[][], double2 A3[][], double2 A4[][],
        double2 A5[][], double2 A6[][], double2 A7[][], double2 A8[][],
        double2 B1[][], double2 B2[][],
        out double2 C1<>, out double2 C2<>, out double2  C3<>, out double2 C4<>,
        out double2 C5<>, out double2 C6<>, out double2  C7<>, out double2 C8<>)
{
    // Setting zero
    double2 zero = double2(0.0, 0.0);

    // Declaring and initializing accumulators
    double2 accumulator1 = zero;
    double2 accumulator2 = zero;
    double2 accumulator3 = zero;
    double2 accumulator4 = zero;
    double2 accumulator5 = zero;
    double2 accumulator6 = zero;
    double2 accumulator7 = zero;
    double2 accumulator8 = zero;

    // Row number of output position
    int i = instance().y;

    // Column number of output position
    int j = instance().x;

    int k = 0;
    for(; k < loopVar0; ++k)
    {
        // Fetching values from A
        double2 A11 = A1[i][k];  double2 A22 = A2[i][k];
        double2 A33 = A3[i][k];  double2 A44 = A4[i][k];
        double2 A55 = A5[i][k];  double2 A66 = A6[i][k];
        double2 A77 = A7[i][k];  double2 A88 = A8[i][k];
        
        // Fetching values from B
        double2 B11 = B1[k][j];  double2 B22 = B2[k][j];

        accumulator1 += A11.xx * B11.xy + A11.yy * B22.xy;
        accumulator2 += A22.xx * B11.xy + A22.yy * B22.xy;
        accumulator3 += A33.xx * B11.xy + A33.yy * B22.xy;
        accumulator4 += A44.xx * B11.xy + A44.yy * B22.xy;
        accumulator5 += A55.xx * B11.xy + A55.yy * B22.xy;
        accumulator6 += A66.xx * B11.xy + A66.yy * B22.xy;
        accumulator7 += A77.xx * B11.xy + A77.yy * B22.xy;
        accumulator8 += A88.xx * B11.xy + A88.yy * B22.xy;
    }

    C1 = accumulator1;
    C2 = accumulator2;
    C3 = accumulator3;
    C4 = accumulator4;
    C5 = accumulator5;
    C6 = accumulator6;
    C7 = accumulator7;
    C8 = accumulator8;
}
	
/** 
@brief	Naive matmult implementation for comparison with CPU 
*/
   void 
matmultCPU(double* a, double* b, double* c, int m, int k, int n)
{
    int y;
    for (y = 0; y < m; y++)
    {
        int x;
        for (x = 0; x < n; x++)
        {
            double temp = 0;
            int z;
            for (z = 0; z < k; z++)
            {
                temp += a[y * k + z] * b[z * n + x];
            }
            c[y * n + x] = temp;
        }
    }
}

int doubleCmp(double a, double b)
{
    double epsilon = (double)1e-5;
    double re = (b - a) / a;
    return fabs(re) > epsilon;  
}


int main(int argc, char** argv)
{

    double* Atemp = NULL;
    double* Btemp = NULL;
    double* Ctemp = NULL;
    struct infoRec cmd;
    unsigned int i = 0;

    //double tempValue;
    int m4 = 0;
    int k4 = 0;
    int n4 = 0;
    int M  = 0;
    int K  = 0;
    int N  = 0;

    double* Aparts[8] = {NULL};
    double* Bparts[2] = {NULL};
    double* Cparts[8] = {NULL};

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	// 1 = CPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0); 
	Setup(1);

	ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    
	// Shift right then left to make sure we are a multiple of 8
    cmd.Height = (cmd.Height >> 3) << 3;
    cmd.Width = (cmd.Width >> 3) << 3;

    if (cmd.Height != cmd.Width)
    {
        cmd.Height = cmd.Width;
    }
    if (cmd.Height < 8 || cmd.Width < 8)
    {
        if (!cmd.Quiet)
        {
            fprintf(stderr, "Error: Minimum size for Width/Height is 8.\n");
        }
        else
        {
            printf("%s: Passed!\n", argv[0]);
        }
        return retval;
    }

    M = cmd.Height;
    K = cmd.Width;
    N = cmd.Height;
    m4 = M >> 3;
    k4 = K >> 1;
    n4 = N >> 1;

	/////////////////////////////////////////////////////////////////////////
    // Allocate memory 
	/////////////////////////////////////////////////////////////////////////
    Atemp = allocate_mat_d(M, K);
    Btemp = allocate_mat_d(K, N);
    Ctemp = allocate_mat_d(M, N);

    if (!Atemp || !Btemp || !Ctemp)
    {
        fprintf(stderr, "Error: Memory Allocation.\n");
        retval = 1;
        goto cleanup;
    }

    for (i = 0; i < 8; i++)
    {
        Aparts[i] = allocate_mat_d(m4, k4 << 1);
        Cparts[i] = allocate_mat_d(m4, n4 << 1);
        if (!Aparts[i] || !Cparts[i])
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = 1;
            goto cleanup;
        }
    }

    for (i = 0; i < 2; i++)
    {
        if (!(Bparts[i] = allocate_mat_d(k4, n4 << 1)))
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = 1;
            goto cleanup;
        }
    }

    fill_mat_d(Atemp, M, K, 1, RANDOM);
    fill_mat_d(Btemp, K, N, 1, RANDOM);

    divideMatrix(Atemp, Aparts, M, K, 8);
    divideMatrix(Btemp, Bparts, K, N, 2);

	/////////////////////////////////////////////////////////////////////////
    // Print input data
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_d("Input Matrix A: ", "%lf ", Atemp, M, K);
        print_mat_d("Input Matrix B: ", "%lf ", Btemp, K, N);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_d("Input Matrix A: ", "%3.2lf ", Atemp, 1, K);
        print_mat_d("Input Matrix B: ", "%3.2lf ", Btemp, 1, N);
    }

	/////////////////////////////////////////////////////////////////////////
    // Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
        double2 streamA1<m4, k4>;
        double2 streamA2<m4, k4>;
        double2 streamA3<m4, k4>;
        double2 streamA4<m4, k4>;

        double2 streamA5<m4, k4>;
        double2 streamA6<m4, k4>;
        double2 streamA7<m4, k4>;
        double2 streamA8<m4, k4>;

        double2 streamB1<k4, n4>;
        double2 streamB2<k4, n4>;

        double2 streamC1<m4, n4>;
        double2 streamC2<m4, n4>;
        double2 streamC3<m4, n4>;
        double2 streamC4<m4, n4>;

        double2 streamC5<m4, n4>;
        double2 streamC6<m4, n4>;
        double2 streamC7<m4, n4>;
        double2 streamC8<m4, n4>;

		// Record GPU Total Time 
        Start(0);
        for(i = 0; i < cmd.Iterations; i++)
        {
			// Copying A
			streamRead(streamA1, Aparts[0]);
			streamRead(streamA2, Aparts[1]);
			streamRead(streamA3, Aparts[2]);
			streamRead(streamA4, Aparts[3]);

			streamRead(streamA5, Aparts[4]);
			streamRead(streamA6, Aparts[5]);
			streamRead(streamA7, Aparts[6]);
			streamRead(streamA8, Aparts[7]);

			// Copying B
			streamRead(streamB1, Bparts[0]);
			streamRead(streamB2, Bparts[1]);

			// Running matmatmult
			if( M / 8 != 0 && N / 2 != 0 && K / 2 != 0 )
			{
					optimized_matmult(k4, streamA1, streamA2, streamA3, streamA4, streamA5, streamA6, streamA7, streamA8,
							streamB1, streamB2,
							streamC1, streamC2, streamC3, streamC4, streamC5, streamC6, streamC7, streamC8);
			}
			else
			{
				printf("8 MRT not possible for M = %d, N = %d, K = %d, ", M, N, K);
			}

			// Copying data back to HOST memory
			streamWrite(streamC1, Cparts[0]);
			streamWrite(streamC2, Cparts[1]);
			streamWrite(streamC3, Cparts[2]);
			streamWrite(streamC4, Cparts[3]);
			streamWrite(streamC5, Cparts[4]);
			streamWrite(streamC6, Cparts[5]);
			streamWrite(streamC7, Cparts[6]);
			streamWrite(streamC8, Cparts[7]);
        }
        Stop(0);
    }

    combineMatrix(Cparts, Ctemp, N, M, 8);

	/////////////////////////////////////////////////////////////////////////
	// Print results if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_d("Output Matrix: ", "%lf ", Ctemp, M, N);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_d("Output Matrix: ", "%3.2lf ", Ctemp, 1, N);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
        double gflop = (double)(2.0 * M * K * N * (double)cmd.Iterations)/(double)(1024 * 1024 * 1024);
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time", "Gflops");
		printf( "%-8d%-8d%-16d%-16lf%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time, gflop/time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        double *CPU;
        if (CPU = (double*)malloc(sizeof *CPU * M * N))
        {
			printf("-e Verify correct output.\n");
			printf("Performing Double Precision Matrix Multiplication on CPU ... ");

            matmultCPU(Atemp, Btemp, CPU, M, K, N);

			printf("Done\n");

            res += compare_mat_d(Ctemp, CPU, M, N); 
            if (res)
            {
                printf("%s: Failed!\n\n", argv[0]);
                retval = -1;
            }
            else
            {
                printf("%s: Passed!\n\n", argv[0]);
                retval = 0;
            }
            free(CPU);
        }
        else
        {
            fprintf(stderr, "Error: Allocation failed!\n");
            retval = -1;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Compare performance with CPU if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Performance)
    {
		double cpu_time = 0.0;
		double gpu_time = 0.0;
        double gflop = (double)(2.0 * M * K * N * (double)cmd.Iterations)/(double)(1024 * 1024 * 1024);
		double *CPU;

        if (CPU = (double*)malloc(sizeof *CPU * M * N))
        {
			printf("-p Compare performance with CPU.\n");

			// Record CPU Total Time 
			Start(1);
			for (i = 0; i < cmd.Iterations; ++i)
			{
	            matmultCPU(Atemp, Btemp, CPU, M, K, N);
			}
			Stop(1);

			// Print CPU timing and speedup
			cpu_time = GetElapsedTime(1);
			gpu_time = GetElapsedTime(0);
			printf(	"%-8s%-8s%-16s%-16s%-16s%-16s%-16s\n","Width","Height","Iterations",
					"CPU Total Time","GPU Total Time","Gflops","Speedup");
			printf(	"%-8d%-8d%-16d%-16lf%-16lf%-16lf%-16lf", cmd.Width, cmd.Height, 
					cmd.Iterations, cpu_time, gpu_time, gflop/gpu_time, cpu_time/gpu_time);
			printf("\n\n");
            free(CPU);
        }
        else
        {
            fprintf(stderr, "Error: Allocation failed!\n");
            retval = -1;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Clean up
	/////////////////////////////////////////////////////////////////////////
cleanup:
    if (Atemp)
    {
        free(Atemp);
    }
    if (Btemp)
    {
        free(Btemp);
    }
    if (Ctemp)
    {
        free(Ctemp);
    }

    for(i = 0; i < 8; i++)
    {
        if (Aparts[i])
        {
            free(Aparts[i]);
        }
        if (Cparts[i])
        {
            free(Cparts[i]);
        }
    }
    for(i = 0; i < 2; i++)
    {
        if (Bparts[i])
        {
            free(Bparts[i]);
        }
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

    return(retval);
}
