/****************************************************************************

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Advanced Micro Devices, Inc nor the names of its contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.


THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file double_precision_simple_matmult.br
  \brief A simple matrix matrix multiplication example for any size matrix 
  with double precision

  This basic matrix matrix multiplication algorithm uses gather operations
  to read the corresponding data points and mad's them to an accumulated
  value.

 ****************************************************************************/
#include "common.h"
#include "Timer.h"
#include <stdio.h>

static int retval = 0;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//!
//! C = A * B
//! \param Width The value for which the loop runs over the matrices
//! \param A Input matrix A(MxK)
//! \param B Input matrix B(KxN)
//! \param result Output matrix(MxN)
//!
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
kernel void 
double_precision_simple_matmult(float Width, double A[][], double B[][], out double result<>) 
{
    // vPos - Position of the output matrix i.e. (x,y)
	float2 vPos = indexof(result).xy;
	
    // index - coordinates of A & B from where the values are fetched
	float4 index = float4(vPos.x, 0.0f, 0.0f, vPos.y);
    // step - represents the step by which index is incremented
	float4 step = float4(0.0f, 1.0f, 1.0f, 0.0f);
	
    // accumulator - Accumulates the result of intermediate calculation
    // between A & B
	double accumulator = 0.0;
	
    // Running a  loop which starts from
    // (0,vPos.y) in A and (vPos.x,0) in B
    // and increments the 'y' value of A and the 'x' value of B
    // which basically implies that we're fetching values from
    // the 'vPos.y'th row of A and 'vPox.x'th column of B
    float i0 = Width;
    while(i0 > 0.0f)
    {
        // A[i][k] * B[k][j]
        accumulator += A[index.w][index.z]*B[index.y][index.x];
        index += step;		
        i0 = i0 - 1.0f;
    }

    // Writing the result back to the buffer
    result = accumulator;
}

void 
matmultCPU(double* a, double* b, double* c, int m, int k, int n)
{
    int y;
    for (y = 0; y < m; y++)
    {
        int x;
        for (x = 0; x < n; x++)
        {
            double temp = 0;
            int z;
            for (z = 0; z < k; z++)
            {
                temp += a[y * k + z] * b[z * n + x];
            }

            c[y * n + x] = temp;
        }
    }
}


int main(int argc, char** argv)
{
    struct infoRec cmd;
    double* inputA;
    double* inputB;
    double* output;
    unsigned int Width;
    unsigned int Height;
    unsigned int i;

	/////////////////////////////////////////////////////////////////////////
    // Setup the timers 
	// 0 = GPU Total Time
	// 1 = CPU Total Time
	/////////////////////////////////////////////////////////////////////////
    Setup(0); 
	Setup(1);

	ParseCommandLine(argc, argv, &cmd);
    srand(cmd.Seed);
    Height = cmd.Height;
    Width = cmd.Width;

	/////////////////////////////////////////////////////////////////////////
    // Allocate memory 
	/////////////////////////////////////////////////////////////////////////
    inputA = allocate_mat_d(Height, Width);
    inputB = allocate_mat_d(Width, Height);
    output = allocate_mat_d(Height, Height);
    if (!inputA || !inputB || !output)
    {
        fprintf(stderr, "Error: Memory Allocation.\n");
        retval = -1;
        goto cleanup;
    }

    fill_mat_d(inputA, Height, Width, 1, RANDOM);
    fill_mat_d(inputB, Width, Height, 1, RANDOM);

	/////////////////////////////////////////////////////////////////////////
    // Print input data
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_d("Input Matrix A: ", "%lf ", inputA, Height, Width);
        print_mat_d("Input Matrix B: ", "%lf ", inputB, Width, Height);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_d("Input Matrix A: ", "%lf ", inputA, 1, Width);
        print_mat_d("Input Matrix B: ", "%lf ", inputB, 1, Height);
    }

	/////////////////////////////////////////////////////////////////////////
    // Brook code block
	/////////////////////////////////////////////////////////////////////////
    {
        double A<Height, Width>;
        double B<Width, Height>;
        double C<Height, Height>;

		// Record GPU Total Time 
        Start(0);
        for (i = 0; i < cmd.Iterations; ++i)
        {
			streamRead(A, inputA);
			streamRead(B, inputB);

			// Run the brook program 
				double_precision_simple_matmult((float)Width, A, B, C);

			// Write data back from stream 
			streamWrite(C, output);
        }
        Stop(0);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print results if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verbose)
    {
        print_mat_d("Output Matrix: ", "%lf ", (double*)output, Height, Height);
    }
    else if (!cmd.Quiet)
    {
        printf("Printing first row of data, for more use -v\n");
        print_mat_d("Output Matrix: ", "%lf ", (double*)output, 1, Height);
    }

	/////////////////////////////////////////////////////////////////////////
	// Print timing information
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Timing)
    {
        double gflop = (double)(2.0 * Width * Height * Height * cmd.Iterations)/(double)(1024 * 1024 * 1024);
		double time = GetElapsedTime(0);
		printf(	"%-8s%-8s%-16s%-16s%-16s\n","Width","Height","Iterations",
				"GPU Total Time", "Gflops");
		printf( "%-8d%-8d%-16d%-16lf%-16lf", cmd.Width, cmd.Height, 
				cmd.Iterations, time, gflop/time);
		printf("\n\n");
    }

	/////////////////////////////////////////////////////////////////////////
	// Verify against CPU implementation if requested 
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Verify)
    {
        int res = 0;
        double *CPU;
        if (CPU = (double*)malloc(sizeof *CPU * Height * Height))
        {
			printf("-e Verify correct output.\n");
			printf("Performing Double Precision Matrix Multiplication on CPU ... ");

            matmultCPU((double*)inputA, (double*)inputB, (double*)CPU, Height, Width, Height);
			
			printf("Done\n");

            res += compare_mat_d((double*)CPU, (double*)output, Height, Height);
            if (res)
            {
                printf("%s: Failed!\n", argv[0]);
                retval = -1;
            }
            else
            {
                printf("%s: Passed!\n", argv[0]);
                retval = 0;
            }
            free(CPU);
        }
        else
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Compare performance with CPU if requested
	/////////////////////////////////////////////////////////////////////////
    if (cmd.Performance)
    {
		double cpu_time = 0.0;
		double gpu_time = 0.0;
        double gflop = (double)(2.0 * Width * Height * Height * cmd.Iterations)/(double)(1024 * 1024 * 1024);
        double *CPU;

        if (CPU = (double*)malloc(sizeof *CPU * Height * Height))
        {
			printf("-p Compare performance with CPU.\n");

			// Record CPU Total Time 
			Start(1);
			for (i = 0; i < cmd.Iterations; ++i)
			{
	            matmultCPU((double*)inputA, (double*)inputB, (double*)CPU, Height, Width, Height);
			}
			Stop(1);

			// Print CPU timing and speedup
			cpu_time = GetElapsedTime(1);
			gpu_time = GetElapsedTime(0);
			printf(	"%-8s%-8s%-16s%-16s%-16s%-16s%-16s\n","Width","Height","Iterations",
					"CPU Total Time","GPU Total Time","Gflops","Speedup");
			printf(	"%-8d%-8d%-16d%-16lf%-16lf%-16lf%-16lf", cmd.Width, cmd.Height, 
					cmd.Iterations, cpu_time, gpu_time, gflop/gpu_time, cpu_time/gpu_time);
			printf("\n\n");
            free(CPU);
        }
        else
        {
            fprintf(stderr, "Error: Memory Allocation.\n");
            retval = -1;
        }
    }

	/////////////////////////////////////////////////////////////////////////
	// Clean up
	/////////////////////////////////////////////////////////////////////////
cleanup:
    if (inputA)
    {
        free(inputA);
    }
    if (inputB)
    {
        free(inputB);
    }
    if (output)
    {
        free(output);
    }

    if (!cmd.Verify)
    {
        printf("\nPress enter to exit...\n");
        getchar();
    }

	return retval;
}
