/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors 
  may be used to endorse or promote products derived from this software
  without specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/*****************************************************************************
  \file sparse_matrix_vector.br
  \brief A Sparse Matrix-Vector multiply

    Simple example of how to perform a sparse matrix vector multiplication
  (y = Ax) where the sparse matrix A is represented in padded compressed
  sparse row, aka ITPACK format.  Each row of the matrix is constrained
  to have at most Width nonzero elements.

  Example:  

  1  0  0  3
  2  0  1  9
  0  4  0  0
  0  0  0  5

  The representation of the above matrix, where Width = 3 and
  Height = 4 is:

  Anz:  1 3 0  2 1 9  4 0 0  5 0 0
  Col:  0 3 0  0 2 3  1 0 0  3 0 0 


  Algorithm:

  1. Use a gather to "arrange" the elements of vector x into the ordering
  they will be referenced in the mat-vec multiply (ordering determined by
  cols of nonzeros of A)

  Following the above example, elements of the x vector would be gathered
  using the following access sequence.

  0 3 0  0 2 3  1 0 0  3 0 0

  2. Component-wise multiply the gathered x vector with the nonzeros of A

  3. Perform reduction on resulting stream, reducing via the sum operator
  every Width elements (the rows of the matrix) to get y = Ax.

 ****************************************************************************/

/**
@brief A simple gather kernel
*/
kernel void 
gather(float index<>, float x[], out float result<>) 
{
    result = x[index];
}

/**
@brief    Component-wise multiply
*/
kernel void 
mult(float a<>, float b<>, out float c<>) 
{
    c = a * b;
}

/**
@brief    Reduction kernel to sum elements along rows 
*/
reduce void
sumRows(float nzValues<>, reduce float result<>) 
{
    result += nzValues;
}
