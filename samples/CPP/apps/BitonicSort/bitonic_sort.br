/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Stanford University nor the names of any contributors
  may be used to endorse or promote products derived from this software
  without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

****************************************************************************/
/***************************************************************************
  \file bitonic_sort.br
  \brief A brook implementation of the parallel bitonic sort alogorithm
  Parallel Bitonic Sort

  Sorts Length numbers in O(Length * lg^2(Length) ) time.
  Length should be a power of two

  A good explanation of the parallel sorting algorithm can be found at:
  http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm

****************************************************************************/

kernel void 
bitonic(float input[], out float output<>, float stageWidth, float offset, float twoOffset)
{
    float idx2;
    float sign, dir;
    float min, max;
    float idx1 = (float)instance().x;

    // Either compared with element above or below
    sign = (fmod(idx1, twoOffset) < offset) ? 1.0f : -1.0f;

    // "Arrow" direction in the bitonic search algorithm (see above reference)
    dir = (abs(fmod(floor(idx1 / stageWidth), 2.0f) - 0.0f) < 0.000001f) ? 1.0f: -1.0f;

    // comparing elements idx1 and idx2
    idx2 = idx1 + sign * offset;

    min = (input[idx1] < input[idx2]) ? input[idx1] : input[idx2];
    max = (input[idx1] > input[idx2]) ? input[idx1] : input[idx2];

    output = (abs(sign - dir) < 0.000001f) ? min : max;
}

kernel void bitonic_2D(float input[][], out float output<>, float stageWidth, float offset, float twoOffset,float2 maxvalue)
{

  float2 idx1 = (float2)instance().xy;
  float2 idx2;
  float idx;
  float sign, dir;
  float min, max;
  idx = idx1.x + maxvalue.x * idx1.y;

  // either compared with element above or below
  sign = ( fmod(idx, twoOffset) < offset) ? 1.0f : -1.0f;

  // "arrow" direction in the bitonic search algorithm  (see above reference)
  dir =  ( abs(fmod( floor(idx/stageWidth), 2.0f) - 0.0f) < 0.000001f) ? 1.0f : -1.0f;

  // Calculating the index of the second location
  idx2.x = idx1.x + (sign * offset);
  idx2.y = idx1.y + floor(idx2.x / maxvalue.x);
  idx2.x = fmod(idx2.x, maxvalue.x);
  if (idx2.x < 0.0f)
  {
      idx2.x += maxvalue.x; // only necessary if shiftRight < 0
  }

  // comparing elements idx1 and idx2
  min = (input[idx1.y][idx1.x] < input[idx2.y][idx2.x]) ? input[idx1.y][idx1.x] : input[idx2.y][idx2.x];
  max = (input[idx1.y][idx1.x] > input[idx2.y][idx2.x]) ? input[idx1.y][idx1.x] : input[idx2.y][idx2.x];

  output = (abs(sign - dir) < 0.000001f) ? min : max;
}
