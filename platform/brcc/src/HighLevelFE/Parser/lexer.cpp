/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "unistd-wrapper.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 268
#define YY_END_OF_BUFFER 269
static yyconst short int yy_accept[796] =
    {   0,
        0,    0,    0,    0,    0,    0,  238,  238,    0,    0,
        0,    0,  205,  205,   84,   84,    0,    0,    0,    0,
        0,    0,    0,    0,  269,  267,  265,  266,  266,  162,
        4,  209,  156,  166,    2,  185,  186,  154,  152,  196,
      153,  191,  155,  211,  211,  194,  195,  177,  182,  179,
      193,  199,  209,  209,  187,  188,  168,  209,  198,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  189,  167,  190,  165,
      265,  204,  268,  208,  207,  268,  208,  238,  239,  238,
      245,  268,  268,  268,  251,  263,  268,  237,  223,  222,

      268,  205,   84,   83,   85,   97,  114,   98,  114,  114,
      114,  114,  114,  114,  114,  116,  119,  119,  117,   82,
       80,   82,   71,   70,  265,  266,  181,  209,  161,  163,
      169,  159,  183,  157,  184,  158,  192,    0,  219,    1,
        0,  160,  218,  210,    0,    0,  211,  211,    0,  211,
      211,  211,  172,  178,  176,  180,  173,  209,    5,    3,
      171,  209,  209,  209,  209,  209,  209,  209,  209,   56,
      209,  209,  209,  209,  209,  209,   60,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  170,  164,  265,  204,  204,

      200,    0,  203,    0,    0,  208,  207,  206,    0,  238,
      239,  239,  245,  246,  245,  247,  240,  243,  244,  242,
      241,    0,  262,    0,    0,  262,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  237,    0,  221,
      236,  235,  224,  226,  233,  230,  234,  231,  227,  229,
      228,  232,  236,  205,   84,   83,   97,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  116,  119,  119,   82,
       81,   78,   75,   79,   76,   72,   74,   73,   77,   81,
        0,   69,  197,    0,  215,    0,    6,  217,    0,  214,
      210,  210,    0,  220,  211,  211,  212,  211,  211,  174,

      175,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,   58,  209,  209,  209,  209,
       34,  209,  209,  209,   15,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,    0,    0,  264,
      261,  260,  248,    0,    0,  250,  258,  255,  259,  256,
      252,  254,  253,  257,    0,  224,  226,  225,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  119,    0,  219,    0,    7,    0,  213,    0,  218,

      210,  210,  216,  212,  212,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,    8,  209,   53,   22,  209,  209,  209,
      209,   57,   49,  209,  209,   59,  209,  209,  209,   36,
       19,  209,   40,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,   37,  209,  209,
      209,   21,  209,   17,  209,    0,    0,  248,    0,  250,
      249,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  102,  114,  114,  119,    0,  217,  212,
      212,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,   52,   24,   13,  209,  209,  209,  209,   41,  209,
      209,  209,   35,  209,  209,  209,  209,  209,  209,   28,
      209,  209,  209,  209,  209,  209,  209,  209,   25,   39,
       51,  209,  209,  209,   68,  202,  201,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,   94,  105,
      114,  114,  114,  119,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  140,  209,  209,  209,  142,  209,  209,
      209,  209,  209,  209,   23,  209,  209,   44,    9,   43,
      209,  133,  209,   20,   18,  209,  209,   61,   16,   30,

       47,   62,   11,   50,   67,  209,  209,  130,   27,   38,
      209,   31,  209,  202,  201,  114,  114,  114,  114,  103,
      114,  114,  114,  114,  114,  114,   99,  114,   91,  119,
      209,  209,  209,  209,  149,  209,  120,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  137,
      209,   55,   46,   42,   63,  209,  209,  209,   29,  209,
       12,   26,  209,   33,  209,  114,   95,  106,  114,  114,
      114,  114,  114,  114,  114,   88,  114,  119,  209,  209,
      209,  209,  209,  209,  209,  209,  141,  134,  209,  209,
      143,  209,  122,  209,  131,  209,   54,   45,   64,   10,

      129,  209,   48,   32,   14,  114,  114,  114,  100,  104,
      114,  114,  114,   92,  113,  108,  119,  115,  138,  209,
      209,  144,  121,  209,  209,  209,  209,  148,  209,  209,
      150,  209,  209,  209,   66,   89,   96,  107,  114,  114,
      114,  114,  114,  118,  209,  209,  209,  209,  209,  151,
      135,  146,  128,  123,  132,  124,  209,  114,  101,  114,
      109,  114,   93,  139,   86,  209,  145,  209,  209,  209,
      209,  209,   90,  112,  114,  111,  209,  209,  209,  147,
      127,  125,  209,  110,   87,  209,  136,  209,  209,  209,
      209,   65,  209,  126,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        3,    3,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   22,   22,   22,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   34,   34,   35,   36,
       37,    9,   38,    9,    9,   39,    9,    9,    9,    9,
        9,    9,   40,    9,   41,    9,    9,   42,    9,    9,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,

       53,   54,   55,   56,   57,    9,   58,   59,   60,   61,
       62,   63,    9,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    1,    2,    3,    1,    4,    1,    5,    1,
        1,    6,    7,    7,    8,    1,    1,    1,    1,    8,
        9,    9,    9,    9,    9,    1,    1,    1,    1,    1,
        1,    1,    9,    9,    9,    9,    5,    5,    5,    5,
        5,    5,    1,   10,    1,    1,    5,    1,    9,    9,
        9,    9,    9,    9,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   11,    1,   11,    1
    } ;

static yyconst short int yy_base[826] =
    {   0,
        0,   74,    0,    0,   74,   76,   79,   81,   83,   85,
       84,   86,   98,  100,   93,   95,  128,    0,  198,    0,
      129,  130,    0,    0, 1368, 1369, 1364, 1369, 1362, 1336,
     1369,    0, 1335,   81, 1369, 1369, 1369, 1334,   82, 1369,
      106,  121,   97,  252,  304, 1369, 1369,   85, 1333,   86,
     1369, 1369, 1295,  140, 1369, 1369, 1331, 1312, 1369,   89,
     1294,  157,   96,  150,   60, 1295,  156, 1303, 1293, 1287,
     1300,  158, 1281,  221, 1289, 1294, 1369,  142, 1369, 1369,
      147,  276, 1369,    0, 1369, 1345,  134, 1344, 1369, 1343,
      208,  117, 1342, 1333, 1332, 1331,  368,    0, 1369,  305,

      435,    0,    0,    0, 1369, 1339,    0, 1369, 1294, 1281,
      156, 1277, 1276, 1275, 1287, 1332,    0, 1270, 1369,    0,
        0,  300,  311, 1369, 1330, 1369, 1369,    0, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1313,  360, 1369,
     1316, 1369,  427,  292,  485,  382,  251,  187,    0,    0,
      254,  244, 1301, 1369, 1369, 1369, 1300, 1262, 1369, 1369,
     1369,  462, 1270, 1260, 1272, 1259, 1274, 1261, 1267, 1253,
     1254, 1251, 1251, 1254, 1251, 1248,    0,  350, 1260, 1248,
     1250, 1244,  322,  110,  170,  253, 1252, 1247, 1244, 1250,
     1244,  231, 1248,  279, 1246, 1369, 1369,  281,  420,  519,

     1369, 1298, 1369, 1244, 1243,    0, 1369, 1369, 1295, 1294,
     1369, 1369,  340, 1369,  449, 1369, 1369, 1369, 1369, 1369,
     1369, 1285, 1369, 1284, 1283, 1282,  470,  524, 1281, 1280,
     1279, 1278, 1277, 1276, 1275, 1274, 1273,    0,  468, 1369,
     1369, 1369,  510,  529, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369,    0,    0,    0,    0, 1281,    0,  506, 1226,
     1229, 1220, 1216, 1227, 1214, 1226, 1273,    0, 1213,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1369,
      559, 1369, 1369,  558, 1369, 1270, 1369,  563,  585, 1369,
      265,  281,  568,  590, 1369, 1369,  387, 1369, 1369, 1369,

     1369, 1209,   94, 1205,  285, 1201, 1221,  417, 1220, 1215,
      164, 1196, 1204, 1210, 1202, 1214, 1209, 1197,  178, 1211,
     1209, 1205, 1197, 1203, 1206,    0, 1192, 1200, 1195, 1185,
      318, 1186, 1188, 1193,    0, 1180, 1189, 1179, 1177, 1179,
     1178, 1180, 1187, 1173, 1171, 1171, 1185, 1182, 1185, 1167,
     1170, 1174, 1168, 1177, 1179, 1161, 1167, 1166, 1163, 1369,
     1369, 1369, 1369,  615,  629, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1211,  634,  639,    0, 1163,  296,
     1159, 1158, 1157,  303, 1163, 1166, 1151, 1155, 1161, 1160,
     1154, 1144,  644,  649, 1206, 1369,  659, 1369,  668,  673,

     1369, 1369, 1369,  353,  317, 1152, 1151, 1141, 1149, 1152,
      318, 1138, 1138, 1153, 1142, 1147, 1149,  362, 1143, 1145,
     1133, 1136, 1133,    0, 1135,    0,  407, 1126, 1134, 1123,
     1130,    0,    0, 1124, 1121,    0, 1116, 1124, 1135, 1170,
        0, 1129,    0, 1130, 1115, 1115, 1114, 1124, 1110, 1122,
     1112, 1116, 1121, 1120, 1133,  385, 1105,  444, 1107, 1112,
     1102,    0, 1099,    0, 1111, 1110, 1109, 1369,  692, 1369,
     1369, 1104, 1107, 1098, 1094, 1105,  436, 1105, 1091, 1093,
     1094, 1086, 1102,    0, 1084, 1096, 1085,  697,  712, 1369,
     1369, 1097, 1091, 1081, 1085, 1092, 1079, 1076, 1087, 1073,

     1083, 1080, 1072, 1082, 1075, 1067, 1071, 1080, 1077, 1080,
     1066,    0, 1114,    0, 1065, 1066, 1071, 1062,  494, 1060,
     1068, 1059, 1369, 1060, 1065, 1051, 1059, 1054, 1062,  535,
     1061, 1058, 1060, 1044, 1053, 1044, 1054, 1052,  547, 1092,
        0, 1043, 1037, 1045,    0, 1098, 1097, 1044, 1047, 1032,
     1036, 1042, 1033, 1040, 1036, 1033, 1037, 1036,    0,    0,
     1022, 1020, 1034, 1045, 1017, 1022, 1025, 1015, 1021, 1020,
     1012, 1016, 1025, 1028, 1013, 1024, 1013, 1024, 1006, 1016,
     1019, 1005, 1000, 1011, 1369,  997,  997, 1039,    0, 1048,
     1006,    0, 1008,    0,    0, 1005, 1006,    0,    0, 1043,

        0,    0,    0,    0,    0,  993, 1000,    0, 1028, 1369,
      987,  571,  946, 1001, 1000,  939,  940,  932,  943,  934,
      899,  899,  887,  892,  896,  844,    0,  821,    0,  826,
      801,  804,  813,  805,    0,  808,  723,  704,  719,  720,
      712,  698,  716,  715,  704,  708,  700,  704,  700,    0,
      703,    0,  742, 1369,    0,  701,  689,  686, 1369,  683,
        0, 1369,  697,  734,  693,  692,  697,  696,  676,  694,
      681,  672,  676,  679,  683,    0,  668,  656,  673,  671,
      657,  662,  641,  663,  650,  647,    0,  658,  640,  654,
        0,  649,  652,  628,  639,  620,    0, 1369,  640,    0,

        0,  613,    0, 1369,    0,  596,  600,  599,  598,    0,
      584,  578,  566,  586,    0,    0,  579,    0,  584,  564,
      581,  578,    0,  562,  564,  574,  556,    0,  553,  571,
        0,  558,  551,  539,    0,  550,    0,    0,  549,  530,
      514,  525,  521,    0,  518,  503,  471,  490,  468,    0,
        0,  478,  467,    0,    0,  451,  453,  440,    0,  429,
      418,  414,    0,    0,  408,  391,    0,  388,  386,  365,
      363,  344,    0,    0,  354,    0,  350,  322,  320,    0,
        0,    0,  303,    0,    0,  265,    0,  223,  228,  113,
       92,    0,   88,    0, 1369,  771,  782,  793,  804,  815,

      826,  837,  848,  855,  864,  875,  886,  897,  908,  919,
      930,  941,  952,  963,  974,  985,  992,  997, 1006, 1016,
     1027,  142, 1033,   91, 1042
    } ;

static yyconst short int yy_def[826] =
    {   0,
      795,    1,  796,  796,  797,  797,  798,  798,  799,  799,
      800,  800,  801,  801,  802,  802,  796,   17,  796,   19,
      803,  803,  796,  796,  795,  795,  795,  795,  795,  795,
      795,  804,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  804,  804,  795,  795,  795,  804,  795,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  795,  795,  795,  795,
      795,  795,  795,  805,  795,  795,  805,  806,  795,  806,
      807,  808,  809,  810,  795,  810,  811,  812,  795,  795,

      813,  814,  815,  816,  795,  795,  817,  795,  817,  817,
      817,  817,  817,  817,  817,  795,  818,  818,  795,  819,
      819,  820,  795,  795,  795,  795,  795,  804,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      821,  795,  795,   44,  795,  795,  795,  795,  822,   45,
      795,  795,  795,  795,  795,  795,  795,  804,  795,  795,
      795,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  795,  795,  795,  795,  795,

      795,  795,  795,  795,  795,  805,  795,  795,  795,  806,
      795,  795,  807,  795,  807,  795,  795,  795,  795,  795,
      795,  810,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  823,  812,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  824,  814,  815,  816,  795,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  795,  818,  818,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  795,
      795,  795,  795,  795,  795,  825,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  822,  795,  795,  795,

      795,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  823,  795,  795,  824,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  818,  795,  795,  825,  795,  795,  795,  795,  795,

      795,  795,  795,  795,  795,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  795,  795,  795,  795,  795,
      795,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  795,  795,  795,
      795,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  795,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  795,  795,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  818,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  795,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  804,  804,  804,  804,  795,
      804,  804,  804,  795,  795,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  818,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  795,  804,  804,  804,  804,  795,  804,
      804,  795,  804,  804,  804,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  818,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  795,  804,  804,

      804,  804,  804,  795,  804,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  817,  817,  817,  817,  817,
      817,  817,  817,  818,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  817,  817,  817,
      817,  817,  817,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  817,  817,  817,  817,  804,  804,  804,  804,
      804,  804,  804,  817,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,    0,  795,  795,  795,  795,  795,

      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795
    } ;

static yyconst short int yy_nxt[1446] =
    {   0,
       26,   26,   27,   28,   29,   30,   31,   26,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   45,   45,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   32,   32,   32,   32,   32,   54,   32,
       32,   32,   55,   26,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   32,   67,   68,   69,   32,
       32,   70,   32,   71,   72,   73,   74,   75,   76,   32,
       32,   32,   77,   78,   79,   80,   81,   85,   86,   85,
       86,   82,   89,   90,   89,   90,   95,   99,   95,   99,
      100,  130,  100,   91,   96,   91,   96,  133,   92,  378,

       92,   83,   83,   83,   83,  104,  105,  104,  105,  131,
      134,  140,  153,  154,  156,  157,  141,   87,  174,   87,
      218,  175,   93,  135,   93,  142,   97,  101,   97,  101,
      106,  219,  121,  121,  136,  137,  107,  208,  209,  138,
      108,  139,  139,  139,  139,  139,  159,  163,  169,  198,
      297,  160,  407,  794,  199,  164,  793,  170,  340,  408,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      196,  341,  122,  122,  109,  792,  110,  107,  111,  107,
      107,  112,  107,  107,  107,  107,  107,  113,  114,  107,
      115,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      116,  123,  123,  124,  124,  166,  117,  261,  171,  177,
      172,  214,  167,  184,  185,  197,  178,  262,  168,  173,
      419,  179,  215,  186,  342,  296,  187,  216,  188,  420,
      117,  117,  117,  117,  118,  117,  117,  117,  117,  117,
      119,  343,  428,  429,  117,  296,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      143,  190,  144,  144,  144,  144,  145,  191,  200,  201,
      202,  192,  299,  198,  791,  193,  146,  351,  199,  790,
      147,  295,  148,  149,  298,  352,  203,  203,  203,  203,

      203,  344,  299,  270,  146,  401,  239,  239,  239,  239,
      147,  240,  281,  281,  281,  281,  345,  295,  148,  402,
      298,  149,  143,  789,  150,  150,  150,  150,  150,  204,
      291,  401,  292,  795,  205,  354,  410,  355,  146,  402,
      440,  440,  151,  214,  152,  356,  411,  473,  272,  273,
      291,  478,  274,  275,  795,  491,  146,  474,  292,  795,
      276,  795,  151,  277,  788,  278,  787,  279,  786,  479,
      152,  225,  280,  336,  280,  491,  337,  497,  498,  226,
      139,  139,  139,  139,  139,  282,  338,  339,  227,  227,
      227,  227,  228,  490,  284,  285,  785,  293,  285,  293,

      784,  328,  294,  294,  294,  294,  294,  783,  329,  782,
      505,  781,  284,  285,  330,  331,  229,  230,  285,  490,
      231,  232,  200,  201,  202,  404,  506,  405,  233,  513,
      513,  234,  780,  235,  779,  236,  537,  237,  242,  778,
      203,  203,  203,  203,  203,  404,  538,  288,  288,  288,
      288,  288,  214,  405,  777,  243,  243,  243,  243,  244,
      776,  289,  290,  215,  775,  290,  540,  540,  216,  239,
      239,  239,  239,  204,  240,  774,  414,  415,  205,  289,
      290,  363,  416,  245,  246,  290,  773,  247,  248,  772,
      364,  364,  364,  364,  365,  249,  553,  771,  250,  554,

      251,  555,  252,  143,  253,  145,  145,  145,  145,  145,
      303,  304,  305,  770,  306,  307,  590,  590,  308,  146,
      309,  200,  201,  202,  769,  310,  311,  312,  768,  313,
      376,  376,  376,  376,  377,  366,  767,  146,  766,  203,
      203,  203,  203,  203,  365,  365,  365,  365,  365,  377,
      377,  377,  377,  377,  379,  765,  380,  600,  600,  381,
      281,  281,  281,  281,  764,  382,  383,  763,  384,  609,
      609,  762,  204,  393,  761,  393,  760,  205,  394,  394,
      394,  394,  394,  288,  288,  288,  288,  288,  294,  294,
      294,  294,  294,  664,  664,  759,  758,  397,  398,  757,

      399,  398,  399,  756,  755,  400,  400,  400,  400,  400,
      294,  294,  294,  294,  294,  397,  398,  754,  753,  752,
      751,  398,  750,  749,  748,  403,  468,  747,  403,  746,
      745,  744,  743,  282,  742,  469,  469,  469,  469,  365,
      470,  741,  740,  403,  739,  738,  737,  736,  403,  365,
      365,  365,  365,  365,  376,  376,  376,  376,  377,  377,
      377,  377,  377,  377,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  488,  735,  488,  734,  733,  489,
      489,  489,  489,  489,  285,  732,  731,  285,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  730,  729,

      728,  727,  285,  468,  726,  725,  724,  285,  290,  723,
      722,  290,  365,  365,  365,  365,  365,  489,  489,  489,
      489,  489,  721,  720,  719,  718,  290,  717,  716,  715,
      714,  290,  489,  489,  489,  489,  489,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  398,  703,  702,
      398,  701,  700,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  688,  398,  687,  686,  685,  684,
      398,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  128,
      683,  682,  681,  128,  206,  680,  679,  206,  206,  206,
      206,  206,  206,  206,  206,  210,  210,  210,  210,  210,
      210,  210,  678,  210,  677,  210,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  676,  213,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  238,  675,  238,  674,  238,  238,  238,  238,  238,
      673,  238,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  254,  672,  671,  254,  254,  254,  254,
      254,  254,  254,  254,  255,  255,  255,  255,  255,  255,
      670,  255,  255,  255,  255,  256,  256,  256,  256,  256,
      256,  669,  256,  256,  256,  256,  258,  668,  667,  666,

      258,  268,  615,  614,  665,  268,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  375,  663,
      662,  375,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  661,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,

      614,  613,  612,  611,  610,  608,  607,  606,  605,  604,
      603,  602,  601,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  539,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  512,  511,  510,  509,  508,  507,  504,  503,

      502,  501,  500,  499,  496,  495,  494,  493,  492,  396,
      487,  486,  485,  484,  483,  482,  481,  480,  477,  476,
      475,  472,  471,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      427,  426,  425,  424,  423,  422,  421,  418,  417,  413,
      412,  409,  406,  396,  392,  267,  391,  390,  389,  388,
      387,  386,  385,  257,  361,  374,  373,  372,  371,  370,
      369,  368,  367,  361,  362,  361,  360,  211,  208,  359,

      358,  201,  357,  353,  350,  349,  348,  347,  346,  335,
      334,  333,  332,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  302,  301,  300,
      287,  283,  125,  269,  267,  266,  265,  264,  263,  260,
      259,  257,  795,  223,  223,  221,  212,  211,  207,  195,
      194,  189,  183,  182,  181,  180,  176,  165,  162,  161,
      158,  155,  132,  129,  127,  126,  125,  795,   25,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795
    } ;

static yyconst short int yy_chk[1446] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    5,    5,    6,
        6,    2,    7,    7,    8,    8,    9,   11,   10,   12,
       11,   34,   12,    7,    9,    8,   10,   39,    7,  824,

        8,   13,   13,   14,   14,   15,   15,   16,   16,   34,
       39,   43,   48,   48,   50,   50,   43,    5,   65,    6,
       92,   65,    7,   41,    8,   43,    9,   11,   10,   12,
       17,   92,   21,   22,   41,   41,   17,   87,   87,   42,
       17,   42,   42,   42,   42,   42,   54,   60,   63,   81,
      822,   54,  303,  793,   81,   60,  791,   63,  184,  303,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       78,  184,   21,   22,   17,  790,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       19,   21,   22,   21,   22,   62,   19,  111,   64,   67,
       64,   91,   62,   72,   72,   78,   67,  111,   62,   64,
      311,   67,   91,   72,  185,  148,   72,   91,   72,  311,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,  185,  319,  319,   19,  148,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       44,   74,   44,   44,   44,   44,   44,   74,   82,   82,
       82,   74,  152,  198,  789,   74,   44,  192,  198,  788,
       44,  147,   44,   44,  151,  192,   82,   82,   82,   82,

       82,  186,  152,  122,   44,  291,  100,  100,  100,  100,
       44,  100,  123,  123,  123,  123,  186,  147,   44,  292,
      151,   44,   45,  786,   45,   45,   45,   45,   45,   82,
      144,  291,  144,  144,   82,  194,  305,  194,   45,  292,
      331,  331,   45,  213,   45,  194,  305,  380,  122,  122,
      144,  384,  122,  122,  213,  405,   45,  380,  144,  213,
      122,  144,   45,  122,  783,  122,  779,  122,  778,  384,
       45,   97,  122,  183,  122,  405,  183,  411,  411,   97,
      139,  139,  139,  139,  139,  123,  183,  183,   97,   97,
       97,   97,   97,  404,  139,  139,  777,  146,  139,  146,

      775,  178,  146,  146,  146,  146,  146,  772,  178,  771,
      418,  770,  139,  139,  178,  178,   97,   97,  139,  404,
       97,   97,  199,  199,  199,  297,  418,  297,   97,  427,
      427,   97,  769,   97,  768,   97,  456,   97,  101,  766,
      199,  199,  199,  199,  199,  297,  456,  143,  143,  143,
      143,  143,  215,  297,  765,  101,  101,  101,  101,  101,
      762,  143,  143,  215,  761,  143,  458,  458,  215,  239,
      239,  239,  239,  199,  239,  760,  308,  308,  199,  143,
      143,  227,  308,  101,  101,  143,  758,  101,  101,  757,
      227,  227,  227,  227,  227,  101,  477,  756,  101,  477,

      101,  477,  101,  145,  101,  145,  145,  145,  145,  145,
      162,  162,  162,  753,  162,  162,  519,  519,  162,  145,
      162,  200,  200,  200,  752,  162,  162,  162,  749,  162,
      243,  243,  243,  243,  243,  228,  748,  145,  747,  200,
      200,  200,  200,  200,  228,  228,  228,  228,  228,  244,
      244,  244,  244,  244,  259,  746,  259,  530,  530,  259,
      281,  281,  281,  281,  745,  259,  259,  743,  259,  539,
      539,  742,  200,  284,  741,  284,  740,  200,  284,  284,
      284,  284,  284,  288,  288,  288,  288,  288,  293,  293,
      293,  293,  293,  612,  612,  739,  736,  288,  288,  734,

      289,  288,  289,  733,  732,  289,  289,  289,  289,  289,
      294,  294,  294,  294,  294,  288,  288,  730,  729,  727,
      726,  288,  725,  724,  722,  294,  364,  721,  294,  720,
      719,  717,  714,  281,  713,  364,  364,  364,  364,  364,
      365,  712,  711,  294,  709,  708,  707,  706,  294,  365,
      365,  365,  365,  365,  376,  376,  376,  376,  376,  377,
      377,  377,  377,  377,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  397,  702,  397,  699,  696,  397,
      397,  397,  397,  397,  394,  695,  694,  394,  399,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  693,  692,

      690,  689,  394,  469,  688,  686,  685,  394,  400,  684,
      683,  400,  469,  469,  469,  469,  469,  488,  488,  488,
      488,  488,  682,  681,  680,  679,  400,  678,  677,  675,
      674,  400,  489,  489,  489,  489,  489,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  489,  663,  660,
      489,  658,  657,  656,  653,  651,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  489,  640,  639,  638,  637,
      489,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  804,
      636,  634,  633,  804,  805,  632,  631,  805,  805,  805,
      805,  805,  805,  805,  805,  806,  806,  806,  806,  806,
      806,  806,  630,  806,  628,  806,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  626,  807,  808,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  812,  625,  812,  624,  812,  812,  812,  812,  812,
      623,  812,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  814,  622,  621,  814,  814,  814,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  815,  815,
      620,  815,  815,  815,  815,  816,  816,  816,  816,  816,
      816,  619,  816,  816,  816,  816,  817,  618,  617,  616,

      817,  818,  615,  614,  613,  818,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  823,  611,
      609,  823,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  607,  606,  600,  597,  596,  593,  591,
      590,  588,  587,  586,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,

      546,  544,  543,  542,  540,  538,  537,  536,  535,  534,
      533,  532,  531,  529,  528,  527,  526,  525,  524,  522,
      521,  520,  518,  517,  516,  515,  513,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  487,  486,  485,
      483,  482,  481,  480,  479,  478,  476,  475,  474,  473,
      472,  467,  466,  465,  463,  461,  460,  459,  457,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  442,  440,  439,  438,  437,  435,  434,  431,  430,
      429,  428,  425,  423,  422,  421,  420,  419,  417,  416,

      415,  414,  413,  412,  410,  409,  408,  407,  406,  395,
      392,  391,  390,  389,  388,  387,  386,  385,  383,  382,
      381,  379,  375,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  334,  333,  332,
      330,  329,  328,  327,  325,  324,  323,  322,  321,  320,
      318,  317,  316,  315,  314,  313,  312,  310,  309,  307,
      306,  304,  302,  286,  269,  267,  266,  265,  264,  263,
      262,  261,  260,  257,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  226,  225,  224,  222,  210,  209,  205,

      204,  202,  195,  193,  191,  190,  189,  188,  187,  182,
      181,  180,  179,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  158,  157,  153,
      141,  138,  125,  118,  116,  115,  114,  113,  112,  110,
      109,  106,   96,   95,   94,   93,   90,   88,   86,   76,
       75,   73,   71,   70,   69,   68,   66,   61,   58,   57,
       53,   49,   38,   33,   30,   29,   27,   25,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[268] =
    {   0,
      251,  252,  253,  254,  255,  258,  267,  277,  281,  285,
      289,  293,  298,  302,  306,  310,  314,  318,  322,  326,
      331,  335,  339,  340,  345,  349,  350,  355,  359,  360,
      365,  369,  370,  375,  379,  380,  386,  390,  391,  397,
      401,  405,  406,  412,  416,  417,  421,  425,  429,  434,
      439,  444,  445,  446,  447,  448,  449,  450,  451,  454,
      455,  456,  457,  458,  459,  460,  461,  462,  464,  468,
      490,  500,  507,  514,  521,  528,  535,  542,  549,  556,
      561,  568,  578,  579,  580,  584,  585,  586,  587,  588,
      589,  590,  591,  592,  593,  594,  596,  597,  599,  600,

      601,  602,  603,  604,  605,  606,  607,  608,  609,  610,
      611,  612,  613,  614,  616,  617,  618,  619,  620,  622,
      627,  631,  635,  639,  643,  648,  653,  657,  661,  667,
      668,  669,  671,  672,  673,  675,  677,  678,  679,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  691,  692,
      693,  696,  697,  698,  699,  700,  702,  703,  704,  705,
      706,  708,  709,  710,  712,  713,  714,  715,  717,  718,
      719,  721,  722,  723,  724,  726,  727,  728,  729,  730,
      731,  733,  734,  735,  737,  741,  742,  743,  744,  747,
      749,  750,  752,  753,  754,  755,  756,  759,  760,  763,

      766,  767,  768,  769,  771,  777,  788,  799,  812,  865,
      881,  900,  917,  918,  919,  920,  929,  930,  931,  932,
      937,  941,  949,  955,  984, 1007, 1012, 1019, 1026, 1033,
     1040, 1047, 1054, 1061, 1068, 1073, 1080, 1089, 1091, 1096,
     1097, 1101, 1103, 1108, 1109, 1110, 1115, 1119, 1140, 1164,
     1171, 1180, 1186, 1192, 1198, 1204, 1210, 1216, 1222, 1228,
     1236, 1242, 1248, 1255, 1262, 1264, 1285
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/****************************************************************************

Copyright (c) 2003, Stanford University
All rights reserved.

Copyright (c) 2007, Advanced Micro Devices, Inc.
All rights reserved.


The BRCC portion of BrookGPU is derived from the cTool project
(http://ctool.sourceforge.net) and distributed under the GNU Public License.

Additionally, see LICENSE.ctool for information on redistributing the
contents of this directory.

****************************************************************************/

/*  o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o

    CTool Library
    Copyright (C) 1998-2001     Shaun Flisakowski

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o+o  */

#undef yywrap
extern "C" int yywrap(void);

#define  YY_BUFFER_STATE_DEFD

#include <cstdio>
#include <cstdlib>
#include <string>
#include <cerrno>

#include "main.h"
#include "config.h"
#include "gram.h"
#include "lexer.h"
#include "token.h"
#include "symbol.h"
#include "express.h"
#include "stemnt.h"
#include "project.h"

#ifdef   WINDOWS
#    ifndef  __STDC__
#    define  __STDC__    1
#    pragma warning (disable: 4244)
#    pragma warning (disable: 4267)
#    pragma warning (disable: 4018)
#    endif

int isatty(int) { return 1; }

#endif  /* WINDOWS */

int   err_top_level =0;
int   err_cnt = 0;
void increParserErrCnt(){err_cnt++;}
int   err_tok = 0;
bool  possibleType = true;
bool  possibleTag = false;
bool  possibleLabel = false;

bool file_ppln=false;
int  in_preprocess = 0;
int  in_charconst = 0;

int  gcc2_paren_cnt = 0;

int asmil_nested_brace = 0;

char  tokn_buff[MAX_TOKN_LEN];
char *tokn_end = &tokn_buff[MAX_TOKN_LEN-1];
char *tokn_ptr=tokn_buff;

int cnt_nl(char *txt, int len);

bool  isWide;

#undef YY_INPUT

/* Scan input from a file pointer (default) */

std::string line, last_line;
std::istream *yyinstream;

extern int yypplex( char* buf, int result, int max_len);
int brccYYInput( char* buf, int result, int max_size)
{
    if(globals.enablePreprocessor == false)
    {
        do
        { 
            last_line=line;
            for(result=0; result<max_size; result++)
            {
                char ch;
                if(!yyinstream->read(&ch, 1))
                {
                    if(result==0) result=YY_NULL;
                    break;
                }
                if(result==0) line="";
                if( ch != 0x13 )
                {
                    line+=ch;
                    buf[result]=ch;
                    if(ch=='\n')
                    { 
                        result++;
                        break;
                    }
                }
            }
        }while(0);
    }
    else
    {
        result = yypplex(buf, 0, max_size);
    }
    
    return result;
    
}
#define YY_INPUT(buf,result,max_size) { result = brccYYInput(buf, result, max_size);}


/*
#ifdef DISABLE_BRCC_PREPROCESSOR  

#define YY_INPUT(buf,result,max_size) \
    do { \
        last_line=line; \
        for(result=0; result<max_size; result++) \
         { \
          char ch; \
          if(!yyinstream->read(&ch, 1)) \
           { \
            if(result==0) result=YY_NULL; \
            break; \
           } \
          if(result==0) line=""; \
           if( ch != 0x13 ) { \
          line+=ch; \
          buf[result]=ch; \
          if(ch=='\n') { result++; break; } } \
         } \
    } while(0)
    
#else

extern int yypplex( char* buf, int result, int max_len);
#define YY_INPUT(buf,result,max_size) { result = yypplex(buf, 0, max_size);}

#endif // DISABLE_BRCC_PREPROCESSOR
*/

#define YY_USER_ACTION \
    { \
        gProject->Parse_TOS->yycolno = gProject->Parse_TOS->yynxtcol; \
        gProject->Parse_TOS->yynxtcol += yyleng; \
    }


#undef HERE
#define HERE Location(gProject->Parse_TOS->yylineno, \
       gProject->Parse_TOS->yycolno, gProject->Parse_TOS->transUnit->filename.c_str() )

#undef SETPOS_TOKEN

void setpos_token(YYSTYPE *lvalp)
{
currentLocation.line = gProject->Parse_TOS->yylineno;
currentLocation.column = gProject->Parse_TOS->yycolno;
currentLocation.file = gProject->Parse_TOS->transUnit->filename.c_str();
lvalp->loc = currentLocation;
}

#define SETPOS_TOKEN(TOKEN) setpos_token(lvalp)

#undef  LAST_STATE
#define LAST_STATE() do { if (in_preprocess) BEGIN(PP); else { BEGIN(INITIAL); } } while (0)

#undef  BEGIN_PP
#define BEGIN_PP() do { BEGIN(PP); in_preprocess = 1; } while(0)

YYSTYPE my_var;

EXTERN int yylex ARGS((YYSTYPE *lvalp));

/*  To give some args to yylex */
#undef YY_DECL
#ifdef  __STDC__
/*  #define YY_DECL int yylex YY_PROTO((YYSTYPE *lvalp))  */
#define YY_DECL int yylex (YYSTYPE *lvalp)
#else
#define YY_DECL int yylex(lvalp) YYSTYPE *lvalp;
#endif

#define Start 1
#define PP 2
#define CMMT 3
#define CC 4
#define STR 5
#define PPLN 6
#define GCC_ELIM 7
#define GCC_ATTRIB 8
#define KERNEL_ATTRIB 9
#define ASMIL 10
#define ASMIL_ARGS 11

/* %option nounput */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 796 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1369 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 268 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 268 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 269 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN(CMMT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ BEGIN(CC); isWide = false; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ BEGIN(CC); isWide = true; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ BEGIN(STR);   tokn_ptr = tokn_buff; isWide = false; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ BEGIN(STR);   tokn_ptr = tokn_buff; isWide = true; }
	YY_BREAK
/* <INITIAL>"asm"{allwhite}*"{" { BEGIN(ASMIL); tokn_ptr = tokn_buff; } */
case 6:
YY_RULE_SETUP
{ // Ambiguous C++ style comment, must parse as
                      //    '/' '/*' to be Ansi compliant
                         yywarn(
                            "Ambiguous C++ comment, use '/ /*' -or- '// *'");
                         yyless(2);
                         SETPOS_TOKEN(DIV);
                         return(DIV);
                    }
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ /* C++ style comment */
#if 0
                         /* Brook supports C++ comments.  --Jeremy. */
                         if (cpp_comment_warn){
                             cpp_comment_warn = 0;
                             yywarn("C++ style comment encountered");
                         }
#endif
                     }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
                      lvalp->storage = ST_Auto;
                      return(err_tok = AUTO);
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
                      lvalp->storage = ST_Extern;
                      return(err_tok = EXTRN);
                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
                      lvalp->storage = ST_Register;
                      return(err_tok = REGISTR);
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
                      lvalp->storage = ST_Static;
                      return(err_tok = STATIC);
                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
                      lvalp->storage = ST_Typedef;
                      return(err_tok = TYPEDEF);
                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Const;
                      return(err_tok = CONST);
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Volatile;
                      return(err_tok = VOLATILE);
                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Out;
                      return(err_tok = OUT);
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Shared;
                      return(err_tok = SHARED);
                    }                    
	YY_BREAK
case 17:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Vout;
                      return(err_tok = VOUT);
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Reduce;
                      return(err_tok = REDUCE);
                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Iter;
                      return(err_tok = ITER);
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Kernel;
                      return(err_tok = KERNEL);
                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Void);
                      return(err_tok = VOID);
                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Char);
                      return(err_tok = CHAR);
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_CHAR); }                     
	YY_BREAK
case 24:
YY_RULE_SETUP
{
                            int n = yytext[yyleng -1] - '1'; /* There is no char1 */
                            lvalp->base = new BaseType(BT_Char * (1<<n));
                            return(err_tok = CHAR + n);
                         }   
	YY_BREAK
case 25:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Char | BT_UnSigned);
                      return(err_tok = CHAR);
                    }
	YY_BREAK
case 26:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_UCHAR); }                     
	YY_BREAK
case 27:
YY_RULE_SETUP
{
                            int n = yytext[yyleng -1] - '1'; /* There is no uchar1 */
                            lvalp->base = new BaseType((BT_Char * (1<<n)) | BT_UnSigned);
                            return(err_tok = CHAR + n);
                         }                                          
	YY_BREAK
case 28:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Short);
                      return(err_tok = SHORT);
                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_SHORT); }                     
	YY_BREAK
case 30:
YY_RULE_SETUP
{
                            int n = yytext[yyleng -1] - '1'; /* There is no short1 */
                            lvalp->base = new BaseType(BT_Short * (1<<n));
                            return(err_tok = SHORT + n);
                        } 
	YY_BREAK
case 31:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Short | BT_UnSigned);
                      return(err_tok = SHORT);
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_USHORT); }                    
	YY_BREAK
case 33:
YY_RULE_SETUP
{
                            int n = yytext[yyleng -1] - '1'; /* There is no ushort1 */
                            lvalp->base = new BaseType((BT_Short * (1<<n)) | BT_UnSigned);
                            return(err_tok = SHORT + n);
                        }                                           
	YY_BREAK
case 34:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Int);
                      return(err_tok = INT);
                    }
	YY_BREAK
case 35:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_INT); }                    
	YY_BREAK
case 36:
YY_RULE_SETUP
{
                      int n = yytext[yyleng -1] - '1'; /* There is no int1 */

                      lvalp->base = new BaseType(BT_Int * (1<<n));
                      return(err_tok = INT + n);
                    }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Int | BT_UnSigned);
                      return(err_tok = INT);
                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_UINT); }                    
	YY_BREAK
case 39:
YY_RULE_SETUP
{
                      int n = yytext[yyleng -1] - '1'; /* There is no uint1 */

                      lvalp->base = new BaseType((BT_Int * (1<<n)) | BT_UnSigned);
                      return(err_tok = INT + n);
                    }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Long);
                      return(err_tok = LONG);
                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Float);
                      return(err_tok = FLOAT);
                    }
	YY_BREAK
case 42:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_FLOAT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
                      int n = yytext[yyleng -1] - '1'; /* There is no float1 */

                      lvalp->base = new BaseType(BT_Float * (1<<n));
                      return(err_tok = FLOAT + n);
                    }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Double);
                      return(err_tok = DOUBLE);
                    }
	YY_BREAK
case 45:
YY_RULE_SETUP
{return(err_tok = CONSTRUCTOR_DOUBLE); }                    
	YY_BREAK
case 46:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Double2);
                      return(err_tok = DOUBLE2);
                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_Signed);
                      return(err_tok = SGNED);
                    }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
                      lvalp->base = new BaseType(BT_UnSigned);
                      return(err_tok = UNSGNED);
                    }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
                      lvalp->typeSpec = BT_Enum;
                      possibleTag = true;
                      return(err_tok = ENUM);
                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
                      lvalp->typeSpec = BT_Struct;
                      possibleTag = true;
                      return(err_tok = STRUCT);
                    }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
                      lvalp->typeSpec = BT_Union;
                      possibleTag = true;
                      return(err_tok = UNION);
                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ SETPOS_TOKEN(BREAK); return(BREAK); }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ SETPOS_TOKEN(CASE); return(CASE); }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ SETPOS_TOKEN(CONT); return(CONT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ SETPOS_TOKEN(DEFLT); return(DEFLT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ SETPOS_TOKEN(DO); return(DO); }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ SETPOS_TOKEN(ELSE); return(ELSE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ SETPOS_TOKEN(FOR); return(FOR); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ SETPOS_TOKEN(GOTO);
                      possibleLabel = true;
                      return(GOTO); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ SETPOS_TOKEN(IF); return(IF); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ SETPOS_TOKEN(RETURN); return(RETURN); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ SETPOS_TOKEN(SIZEOF); return(SIZEOF); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ SETPOS_TOKEN(INDEXOF); return(INDEXOF); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ SETPOS_TOKEN(INSTANCE); return(INSTANCE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ SETPOS_TOKEN(INSTANCE_IN_GROUP); return(INSTANCE_IN_GROUP); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ SETPOS_TOKEN(SYNC_GROUP); return(SYNC_GROUP); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ SETPOS_TOKEN(SWITCH); return(SWITCH); }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ SETPOS_TOKEN(WHILE); return(WHILE); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{   /* String Pasting */
                         cnt_nl(yytext,yyleng);
                       }
	YY_BREAK
case 70:
YY_RULE_SETUP
{   /* Closing brace */
                           if (asmil_nested_brace == 0)
                           {
                             LAST_STATE();
                             *tokn_ptr = '\0';
                             //printf("***tokn_buff = %s***\n", tokn_buff);
                             lvalp->consValue =
                             new StringConstant(std::string(tokn_buff,tokn_ptr-tokn_buff),HERE,isWide);
                             return(err_tok = ASM);
                           }
                           else
                           {
                             if (tokn_ptr < tokn_end)
                             {
                               *tokn_ptr++ = '}';
                               asmil_nested_brace--;
                             }
                             else
                               yywarn("String constant too long");
                           }
                       }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                         {
                           *tokn_ptr++ = '{';
                           asmil_nested_brace++;
                         }
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\n';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\t';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\r';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\b';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\f';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\v';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\a';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = ESC_VAL;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 80:
YY_RULE_SETUP
{  /* continuation */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                       }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = yytext[1];
                         else
                            yywarn("ASM too long");
                       }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
                         int n = yyleng;
                         if (tokn_ptr + n < tokn_end) {
                             memcpy(tokn_ptr,yytext,n);
                             tokn_ptr += n;
                         } else
                            yywarn("ASM too long");
                       }
	YY_BREAK
/* GCC2 Extensions */
case 83:
YY_RULE_SETUP
{ gcc2_paren_cnt++; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ /* Throw away */ }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ if (--gcc2_paren_cnt == 0)
                          BEGIN(INITIAL);
                      }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ BEGIN(GCC_ATTRIB); return(err_tok = ATTRIBUTE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ BEGIN(GCC_ATTRIB); return(err_tok = ATTRIBUTE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = ALIGNED); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = ALIGNED); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = ALIGNED); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = PACKED); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = PACKED); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = PACKED); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = CDECL); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = CDECL); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = CDECL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ SETPOS_TOKEN(LPAREN); return(LPAREN); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = FORMAT); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = FORMAT); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = FORMAT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = MODE); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = MODE); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = MODE); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = CONST); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = CONST); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = CONST); }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = NORETURN); }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = NORETURN); }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = NORETURN); }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = NOTHROW); }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = NONNULL); }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = PURE); }
	YY_BREAK
case 114:
YY_RULE_SETUP
{BEGIN(INITIAL); return(err_tok = UNKNOWN_GCC_ATTRIBUTE); }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ BEGIN(KERNEL_ATTRIB); return(err_tok = KERNEL_ATTRIBUTE); }
	YY_BREAK
case 116:
YY_RULE_SETUP
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ SETPOS_TOKEN(LBRCKT); return(LBRCKT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ BEGIN(INITIAL); return(err_tok = GROUPSIZE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
{BEGIN(INITIAL); return(err_tok = UNKNOWN_KERNEL_ATTRIBUTE); }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
                      lvalp->typeQual = TQ_Const;
                      return(err_tok = CONST);
                    }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
                        lvalp->typeQual = TQ_Const;
                        return(err_tok = CONST);
                      }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
                      lvalp->type = new BaseType(BT_Signed);
                      return(err_tok = SGNED);
                    }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
                        lvalp->type = new BaseType(BT_Signed);
                        return(err_tok = SGNED);
                      }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
                        lvalp->typeQual = TQ_Volatile;
                        return(err_tok = VOLATILE);
                      }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
                          lvalp->typeQual = TQ_Volatile;
                          return(err_tok = VOLATILE);
                        }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
    lvalp->type = new BaseType(BT_GCC_BuiltInVAList);
    return (err_tok = GCC_BUILTIN);
}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    lvalp->typeQual = TQ_Restrict;
    return (err_tok = RESTRICT);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    lvalp->typeQual = TQ_Restrict;
    return (err_tok = RESTRICT);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    lvalp->typeQual = TQ_Restrict;
    return (err_tok = RESTRICT);
}
	YY_BREAK
case 130:
YY_RULE_SETUP
{ }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ lvalp->binOp = BO_Plus; return(PLUS); }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ lvalp->binOp = BO_Minus; return(MINUS); }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ lvalp->binOp = BO_Mult; return(STAR); }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ lvalp->binOp = BO_Div; return(DIV); }
	YY_BREAK
case 156:
YY_RULE_SETUP
{ lvalp->binOp = BO_Mod; return(MOD); }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ lvalp->assignOp = AO_PlusEql; return(ASSIGN); }
	YY_BREAK
case 158:
YY_RULE_SETUP
{ lvalp->assignOp = AO_MinusEql; return(ASSIGN); }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ lvalp->assignOp = AO_MultEql; return(ASSIGN); }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ lvalp->assignOp = AO_DivEql; return(ASSIGN); }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ lvalp->assignOp = AO_ModEql; return(ASSIGN); }
	YY_BREAK
case 162:
YY_RULE_SETUP
{ SETPOS_TOKEN(NOT); return(NOT); }
	YY_BREAK
case 163:
YY_RULE_SETUP
{ SETPOS_TOKEN(AND); return(AND); }
	YY_BREAK
case 164:
YY_RULE_SETUP
{ SETPOS_TOKEN(OR); return(OR); }
	YY_BREAK
case 165:
YY_RULE_SETUP
{ SETPOS_TOKEN(B_NOT); return(B_NOT); }
	YY_BREAK
case 166:
YY_RULE_SETUP
{ SETPOS_TOKEN(B_AND); return(B_AND); }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ SETPOS_TOKEN(B_OR); return(B_OR); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ SETPOS_TOKEN(B_XOR); return(B_XOR); }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ lvalp->assignOp = AO_BitAndEql; return(ASSIGN); }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ lvalp->assignOp = AO_BitOrEql; return(ASSIGN); }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ lvalp->assignOp = AO_BitXorEql; return(ASSIGN); }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ lvalp->binOp = BO_Shl; return(L_SHIFT); }
	YY_BREAK
case 173:
YY_RULE_SETUP
{ lvalp->binOp = BO_Shr; return(R_SHIFT); }
	YY_BREAK
case 174:
YY_RULE_SETUP
{ lvalp->assignOp = AO_ShlEql; return(ASSIGN); }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ lvalp->assignOp = AO_ShrEql; return(ASSIGN); }
	YY_BREAK
case 176:
YY_RULE_SETUP
{ lvalp->relOp = RO_Equal; return(COMP_EQ); }
	YY_BREAK
case 177:
YY_RULE_SETUP
{ lvalp->relOp = RO_Less; return(COMP_LESS); }
	YY_BREAK
case 178:
YY_RULE_SETUP
{ lvalp->relOp = RO_LessEql; return(COMP_ARITH); }
	YY_BREAK
case 179:
YY_RULE_SETUP
{ lvalp->relOp = RO_Grtr; return(COMP_GRTR); }
	YY_BREAK
case 180:
YY_RULE_SETUP
{ lvalp->relOp = RO_GrtrEql; return(COMP_ARITH); }
	YY_BREAK
case 181:
YY_RULE_SETUP
{ lvalp->relOp = RO_NotEqual; return(COMP_EQ); }
	YY_BREAK
case 182:
YY_RULE_SETUP
{ lvalp->assignOp = AO_Equal; return(EQ); }
	YY_BREAK
case 183:
YY_RULE_SETUP
{ SETPOS_TOKEN(INCR); return(INCR); }
	YY_BREAK
case 184:
YY_RULE_SETUP
{ SETPOS_TOKEN(DECR); return(DECR); }
	YY_BREAK
case 185:
YY_RULE_SETUP
{ SETPOS_TOKEN(LPAREN);
                      possibleType = true;
                      return(LPAREN);
                    }
	YY_BREAK
case 186:
YY_RULE_SETUP
{ SETPOS_TOKEN(RPAREN); return(RPAREN); }
	YY_BREAK
case 187:
YY_RULE_SETUP
{ SETPOS_TOKEN(LBRCKT); return(LBRCKT); }
	YY_BREAK
case 188:
YY_RULE_SETUP
{ SETPOS_TOKEN(RBRCKT); return(RBRCKT); }
	YY_BREAK
case 189:
YY_RULE_SETUP
{ SETPOS_TOKEN(LBRACE);
                      possibleTag = false;
                      return(LBRACE); }
	YY_BREAK
case 190:
YY_RULE_SETUP
{ SETPOS_TOKEN(RBRACE); return(RBRACE); }
	YY_BREAK
case 191:
YY_RULE_SETUP
{ SETPOS_TOKEN(DOT); return(DOT); }
	YY_BREAK
case 192:
YY_RULE_SETUP
{ SETPOS_TOKEN(ARROW); return(ARROW); }
	YY_BREAK
case 193:
YY_RULE_SETUP
{ SETPOS_TOKEN(QUESTMARK); return(QUESTMARK); }
	YY_BREAK
case 194:
YY_RULE_SETUP
{ SETPOS_TOKEN(COLON); return(COLON); }
	YY_BREAK
case 195:
YY_RULE_SETUP
{ SETPOS_TOKEN(SEMICOLON); return(SEMICOLON); }
	YY_BREAK
case 196:
YY_RULE_SETUP
{ SETPOS_TOKEN(COMMA); return(COMMA); }
	YY_BREAK
case 197:
YY_RULE_SETUP
{ SETPOS_TOKEN(ELLIPSIS); return(ELLIPSIS); }
	YY_BREAK
/* Unused (invalid) characters */
case 198:
YY_RULE_SETUP
{ SETPOS_TOKEN(BACKQUOTE); return(BACKQUOTE); }
	YY_BREAK
case 199:
YY_RULE_SETUP
{ SETPOS_TOKEN(AT); return(AT); }
	YY_BREAK
/* Preprocessor Stuff */
case 200:
YY_RULE_SETUP
{ gProject->Parse_TOS->yylineno++;
                                      gProject->Parse_TOS->yynxtcol = 0; }
	YY_BREAK
case 201:
YY_RULE_SETUP
{ BEGIN(PPLN); tokn_ptr = tokn_buff; *tokn_ptr++ = '#';}
	YY_BREAK
case 202:
YY_RULE_SETUP
{ file_ppln=true; BEGIN(PPLN); tokn_ptr = tokn_buff; *tokn_ptr++ = '#';}
	YY_BREAK
case 203:
YY_RULE_SETUP
{ BEGIN(PPLN); yyless(1); }
	YY_BREAK
case 204:
YY_RULE_SETUP
{ BEGIN_PP(); tokn_ptr = tokn_buff; *tokn_ptr++ = '#'; }
	YY_BREAK
case 205:
YY_RULE_SETUP
{
                         BEGIN_PP();
                         if (get_lineno(file_ppln,yytext,&(lvalp->stemnt)))
                                                        return (err_tok = PP_LINE);
                         }
	YY_BREAK
case 206:
YY_RULE_SETUP
{  /* Preprocessor continuation line */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         if (tokn_ptr + 2 < tokn_end) {
                            *tokn_ptr++ = '\\';
                            *tokn_ptr++ = '\n';
                         } else {
                            yywarn("Multi-line preprocessor directive too long");
                         }
                       }
	YY_BREAK
case 207:
YY_RULE_SETUP
{  /* End of this preprocessor logical line */
                         *tokn_ptr = '\0';
                         file_ppln=false;
                         in_preprocess = 0;
                         yyless(0);        /* Hack! */
                         LAST_STATE();
                         lvalp->stemnt =
                           new PPDirective(std::string(tokn_buff, tokn_ptr-tokn_buff),HERE);
                         return(err_tok = PP_DIR);
                       }
	YY_BREAK
case 208:
YY_RULE_SETUP
{
                            int n = yyleng;
                            if (tokn_ptr + n < tokn_end)
                            {
                                memcpy(tokn_ptr,yytext,n);
                                tokn_ptr += n;
                            }
                            else
                            {
                               yywarn("Preprocessor directive too long");
                            }
                         }
	YY_BREAK
case 209:
YY_RULE_SETUP
{    /* Identifier */
                         SETPOS_TOKEN(0);
                         lvalp->symbol = new Symbol();

                         lvalp->symbol->name = yytext;

                         if (possibleTag)
                         {
                           /* Check the tag table and insert a  */
                           /* ptr back to the definition.  */
                           SymEntry *se
                              = gProject->Parse_TOS->transUnit->contxt.tags->Lookup(
                                    lvalp->symbol->name);
                           lvalp->symbol->entry = se;
                           possibleTag = false;
                           return(err_tok = TAG_NAME);
                         }
                         else if (possibleLabel)
                         {
                           /* Check the tag table and insert a  */
                           /* ptr back to the definition.  */
                           SymEntry *se
                              = gProject->Parse_TOS->transUnit->contxt.labels->LookupAt(
                                    lvalp->symbol->name,FUNCTION_SCOPE);
                           lvalp->symbol->entry = se;
                           if (!se)
                               gProject->Parse_TOS->transUnit->contxt.labels
                                   ->InsertAt(lvalp->symbol->entry = mk_label(lvalp->symbol->name, NULL),
                                       FUNCTION_SCOPE);

                           possibleLabel = false;
                           return(err_tok = LABEL_NAME);
                         }
                         else {
                           /* Check the symbol table and insert a  */
                           /* ptr back to the definition.  */
                           SymEntry *se
                              = gProject->Parse_TOS->transUnit->contxt.syms->Lookup(
                                    lvalp->symbol->name);
                           lvalp->symbol->entry = se;

                            if (possibleType)
                            {
                              if (se && se->IsTypeDef())
                              {
                                  return(err_tok = TYPEDEF_NAME);
                              }
                            }
                         }

                         return(err_tok = IDENT);
                       }
	YY_BREAK
case 210:
YY_RULE_SETUP
{  /* An octal integer */
                         std::string intStr = "";
                         intStr.append(yytext);
                         unsigned long ui = strtoul(yytext, (char**) NULL, 0);   
                         if(intStr[intStr.length() - 1] == 'u' || intStr[intStr.length() - 1] == 'U')
                         {
                            /* unsigned integer */
                            lvalp->consValue = new UIntConstant(ui, HERE, BR_Octal_Form);
                         }
                         else
                         {
                            lvalp->consValue = new IntConstant((long)ui, HERE, BR_Octal_Form);
                         }

                         return(err_tok = INUM);
                   }
	YY_BREAK
case 211:
YY_RULE_SETUP
{  /* Decimal integer */
                         std::string intStr = "";
                         intStr.append(yytext);
                         unsigned long ui = 0;   
                         long i = 0;                                               
                         if(intStr[intStr.length() - 1] == 'u' || intStr[intStr.length() - 1] == 'U')
                         {
                            /* unsigned integer */
                            ui = strtoul(yytext, (char**) NULL, 0);
                            lvalp->consValue = new UIntConstant(ui, HERE);
                         }
                         else
                         {
                            i = strtol(yytext, (char**) NULL, 0);
                            lvalp->consValue = new IntConstant(i, HERE);
                         }

                         return(err_tok = INUM);
                    }
	YY_BREAK
case 212:
YY_RULE_SETUP
{  /* Hexdecimal integer */
                         std::string intStr = "";
                         intStr.append(yytext);
                         unsigned long ui = strtoul(yytext, (char**) NULL, 0);                           
                         if(intStr[intStr.length() - 1] == 'u' || intStr[intStr.length() - 1] == 'U')
                         {
                            /* unsigned integer */
                            lvalp->consValue = new UIntConstant(ui, HERE, BR_HexDecimal_Form);
                         }
                         else
                         {
                            lvalp->consValue = new IntConstant((long)ui, HERE, BR_HexDecimal_Form);
                         }

                         return(err_tok = INUM);
                    }
	YY_BREAK
case 213:
case 214:
case 215:
case 216:
YY_RULE_SETUP
{
                         /*
                         ** Note: The floatsuffix, if any, will be
                         ** ignored by atof().
                         */
                         lvalp->consValue = new FloatConstant(std::string(yytext),HERE);
                         return(err_tok = RNUM);
                       }
	YY_BREAK
case 217:
case 218:
case 219:
case 220:
YY_RULE_SETUP
{
                         lvalp->consValue = new DoubleConstant(std::string(yytext),HERE);
                         return(err_tok = RNUM);
                       }
	YY_BREAK
case 221:
YY_RULE_SETUP
{   /* String Pasting */
                         cnt_nl(yytext,yyleng);
                       }
	YY_BREAK
case 222:
YY_RULE_SETUP
{   /* Closing quote */
                         LAST_STATE();
                         *tokn_ptr = '\0';
                         lvalp->consValue =
                           new StringConstant(std::string(tokn_buff,tokn_ptr-tokn_buff),HERE,isWide);
                         return(err_tok = STRING);
                       }
	YY_BREAK
case 223:
YY_RULE_SETUP
{ /* Error - unterminated string constant */
                         yyerr("Unterminated string constant starting");
                         LAST_STATE();
                         return(INVALID);
                       }
	YY_BREAK
case 224:
YY_RULE_SETUP
{ /* octal escape sequence */
                         uint result;
                         char tmpOct[20];

                         strncpy(tmpOct,yytext,yyleng);
                         tmpOct[yyleng] = '\0';
                         tmpOct[4] = '\0';

                         if (yyleng > 4)
                             yyless(4);

                         if (sscanf(tmpOct+1, "%o", &result ) < 1)
                         {
                             yyerr("Invalid octal escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                            yyerr("Escape sequence out-of-bounds");
                         }

                         if (tokn_ptr < tokn_end)
                            *tokn_ptr++ = result;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 225:
YY_RULE_SETUP
{   /* hex escape sequence - ISO C */
                         uint result;

                         if (sscanf(yytext+2, "%x", &result ) < 1)
                         {
                             yyerr("Invalid hex escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                            yyerr("Escape sequence out-of-bounds");
                         } else if (yyleng > 4){
                            yywarn("Hexadecimal escape exceeds two chars");
                         }

                         if (tokn_ptr < tokn_end)
                            *tokn_ptr++ = result;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 226:
YY_RULE_SETUP
{  /* Bad escape sequence */
                         yywarn("Bad escape sequence in string");
                        *tokn_ptr++ = '?';
                       }
	YY_BREAK
case 227:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\n';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 228:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\t';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 229:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\r';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 230:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\b';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 231:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\f';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 232:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\v';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 233:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\a';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 234:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = ESC_VAL;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 235:
YY_RULE_SETUP
{  /* String continuation */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                       }
	YY_BREAK
case 236:
YY_RULE_SETUP
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = yytext[1];
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 237:
YY_RULE_SETUP
{
                         int n = yyleng;
                         if (tokn_ptr + n < tokn_end) {
                             memcpy(tokn_ptr,yytext,n);
                             tokn_ptr += n;
                         } else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 238:
YY_RULE_SETUP
{   /* Inside C-style comment */ }
	YY_BREAK
case 239:
YY_RULE_SETUP
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case 240:
YY_RULE_SETUP
{ }
	YY_BREAK
case 241:
YY_RULE_SETUP
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                       }
	YY_BREAK
case 242:
YY_RULE_SETUP
{
                       }
	YY_BREAK
case 243:
YY_RULE_SETUP
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case 244:
YY_RULE_SETUP
{ yywarn("/* inside comment"); }
	YY_BREAK
case 245:
YY_RULE_SETUP
{   /* Stars */ }
	YY_BREAK
case 246:
YY_RULE_SETUP
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case 247:
YY_RULE_SETUP
{
                         LAST_STATE();
                       }
	YY_BREAK
case 248:
YY_RULE_SETUP
{   /* octal escape sequence */
                         uint result;

                         if (sscanf(yytext+1, "%o", &result ) < 1)
                         {
                             yyerr("Invalid octal escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                             yywarn("Escape sequence out-of-bounds");
                             result = 0;
                         }

                         lvalp->consValue = new CharConstant((char) result, HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 249:
YY_RULE_SETUP
{   /* hex escape sequence - ISO C */
                         uint result;

                         if (sscanf(yytext+2, "%x", &result ) < 1)
                         {
                             yyerr("Invalid hex escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                             yywarn("Escape sequence out-of-bounds");
                             result = 0;
                         } else if (yyleng > 5){
                             yywarn("Hexadecimal escape exceeds two chars");
                             result = 0;
                         }

                         lvalp->consValue = new CharConstant((char) result, HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 250:
YY_RULE_SETUP
{  /* Bad escape sequence */
                         yywarn("Bad escape sequence in char constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 251:
YY_RULE_SETUP
{ /* Error unterminated char constant */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         yywarn("Unterminated char constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 252:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\n',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 253:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\t',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 254:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\r',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 255:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\b',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 256:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\f',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 257:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\v',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 258:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant('\a',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 259:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant(ESC_VAL,HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 260:
YY_RULE_SETUP
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 1;  /* Oddity */
                         lvalp->consValue = new CharConstant('\n',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 261:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant(yytext[1],HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 262:
YY_RULE_SETUP
{
                         lvalp->consValue = new CharConstant(*yytext,HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 263:
YY_RULE_SETUP
{ /* Empty */
                         yywarn("Empty character constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 264:
YY_RULE_SETUP
{ /* Multiple characters */
                         yywarn("Invalid character constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 265:
YY_RULE_SETUP
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 266:
YY_RULE_SETUP
{ gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case YY_STATE_EOF(CMMT):
{
                         yyerr("EOF reached inside comment");
                         in_preprocess = 0;
                         return(0);
                       }
	YY_BREAK
case YY_STATE_EOF(CC):
{
                         yyerr("EOF reached inside character constant");
                         return(0);
                       }
	YY_BREAK
case YY_STATE_EOF(STR):
{
                         yyerr("EOF reached inside string constant");
                         return(0);
                       }
	YY_BREAK
case 267:
YY_RULE_SETUP
{ /* Any unknown char is an error */
                        *gProject->Parse_TOS->yyerrstream
                           << "Error: Line " << gProject->Parse_TOS->yylineno
                           << ": Illegal Character";
                        if ((yytext[0] >= ' ') && (yytext[0] <= '~'))
                          *gProject->Parse_TOS->yyerrstream
                           << ": '" << yytext[0] << "'\n";
                        else
                          *gProject->Parse_TOS->yyerrstream
                           << ", ASCII: " << std::hex << (int)(yytext[0])
                                 << " (hex)\n" << std::dec;
                       }
	YY_BREAK
case 268:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PPLN):
case YY_STATE_EOF(GCC_ELIM):
case YY_STATE_EOF(GCC_ATTRIB):
case YY_STATE_EOF(KERNEL_ATTRIB):
case YY_STATE_EOF(ASMIL):
case YY_STATE_EOF(ASMIL_ARGS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 796 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 796 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 795);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


/************************************************************************
//
// yywrap() - This function is called by the lexer [yylex() or sslex()] when
//            the end-of-file (or end-of-string for sslex()) is reached.
//            It gets the next file/string ready (if any) and returns 1
//            which indicates to the lexer that there are no more files
//            remaining.  The lexer returns 0 to the parser, indicating
//            no more tokens are remaining. The parser function, yyparse(),
//            then returns 0, indicating that the parse is done.  This
//            behaviour allows a single item to be parsed to be placed
//            on the stack and parsed without the entire stack being consumed.
//
// **********************************************************************/

int yywrap(void)
{
    in_preprocess = 0;
    return 1;
}

/***********************************************************************/
int cnt_nl(char *txt, int len)
{
  int ret = 0;

  do {
    switch (*txt++) {
      case '\n':
        ret++;
        gProject->Parse_TOS->yylineno++;
        gProject->Parse_TOS->yynxtcol = 0;
        break;

      default:
        break;
    }
  } while(--len > 0);

  return ret;
}

/***********************************************************************/
/*  Process a #line directive */
int get_lineno(bool file_ppln, char *txt, Statement **stement)
{
    int   ln = 0;
    *stement = NULL ;
    int   oldyylineno = gProject->Parse_TOS->yylineno;
    do {
        if (txt)
        {
            if (file_ppln)
            {
                ln = 0;
            }
            else
            {
                if (sscanf(txt,"%d", &ln) < 1)
                {
                    break;
                }
                gProject->Parse_TOS->yylineno = ln - 1;
            }

            txt = strchr(txt,'"');

            if (txt)
            {
                char *pnt_end;

                txt++;

                pnt_end = strchr(txt,'"');
                if (pnt_end)
                    *pnt_end = '\0';
                else
                    break;

                int entered_or_exited;
                if (sscanf(pnt_end+1,"%d", &entered_or_exited) < 1)
                    entered_or_exited = -1;

                switch (entered_or_exited)
                {
                case 2:
                    // new line number into the previous included file
                    gProject->Parse_TOS->yylineno = oldyylineno;
                    *stement = new EndInclStemnt(HERE);
                    if (! file_ppln)
                        gProject->Parse_TOS->yylineno = ln - 1;
                    gProject->Parse_TOS->filename = txt;
                    return (*stement != NULL);

                case 1:
                    // new line number into a new include file
                    gProject->Parse_TOS->yylineno = oldyylineno;
                    if (! file_ppln)
                        gProject->Parse_TOS->yylineno = ln - 1;
                    gProject->Parse_TOS->filename = txt;
                    *stement = new InclStemnt(gProject->Parse_TOS->filename, HERE);
                    return (*stement != NULL);

                case 3:
                    // new line number introduced by the gcc preprocessor
                    // into the same file
                    if (gProject->Parse_TOS->filename == txt &&
                        ln > oldyylineno)
                    {
                        gProject->Parse_TOS->filename = txt;
                        return 0;
                    }
                    /* No break */
                default:
                    yywarn("Malformed #line directive");
                    /* No break */
                case -1:
                    // new line number into the same file
                    gProject->Parse_TOS->yylineno = oldyylineno;
                    gProject->Parse_TOS->filename = txt;
                    *stement = new FileLineStemnt(gProject->Parse_TOS->filename, ln, HERE);
                    if (!file_ppln)
                        gProject->Parse_TOS->yylineno = ln - 1;
                    return (*stement != NULL);
                }
            }
        }

        return 0;
    } while (0);

    yywarn("Malformed #line directive");
    return 0;
}

/***********************************************************************/

void print_caret(const std::string &s, int pos)
{
    const char *str;
    int i = 0;

    for (str=s.c_str(); *str && (i<pos); i++, str++)
        if (*str=='\t')
            *gProject->Parse_TOS->yyerrstream << "\t";
        else
            *gProject->Parse_TOS->yyerrstream << " ";

    *gProject->Parse_TOS->yyerrstream << "^\n";
}

/***********************************************************************/

void yywarn(char *s)
{
    *gProject->Parse_TOS->yyerrstream
         << gProject->Parse_TOS->transUnit->filename << "(" << gProject->Parse_TOS->yylineno
         << ") : Warning - " << s << ":\n" << line;
    print_caret(line, gProject->Parse_TOS->yycolno);
}

/***********************************************************************/

int yyerr(char *s, std::string & str)
{
    *gProject->Parse_TOS->yyerrstream
      << gProject->Parse_TOS->filename << "(" << gProject->Parse_TOS->yylineno
      << ") : " << s << str << ":\n" << line;
    print_caret(line, gProject->Parse_TOS->yycolno);

    ++err_top_level;
    if (++err_cnt >= 10){
        *gProject->Parse_TOS->yyerrstream
          << "Too many errors (" << err_cnt << " detected) - quitting.\n";
        return(1);
    }
    return(0);
}

/***********************************************************************/

int yyerr(char *s)
{
    *gProject->Parse_TOS->yyerrstream
      << gProject->Parse_TOS->filename << "(" << gProject->Parse_TOS->yylineno
      << ") : " << s << ":\n" << line;
    print_caret(line, gProject->Parse_TOS->yycolno);


    ++err_top_level;
    if (++err_cnt >= 10){
        *gProject->Parse_TOS->yyerrstream
          << "Too many errors (" << err_cnt << " detected) - quitting.\n";
        return(1);
    }
    return(0);
}

/***********************************************************************/

int yyerror(char *s)
{
    *gProject->Parse_TOS->yyerrstream
      << gProject->Parse_TOS->transUnit->filename << "(" << gProject->Parse_TOS->yylineno
      << ") : Error (" << s << ") before '"
      << toksym(err_tok,0) << "'\n" << line;
    print_caret(line, gProject->Parse_TOS->yycolno);

    /*
     * This does _NOTHING_.  Bison, at least, ignores the return value of
     * yyerror().  I don't know why cTool does this.  --Jeremy.
     */
    if (++err_cnt >= 10){
        *gProject->Parse_TOS->yyerrstream
          << "Too many errors (" << err_cnt << " detected) - quitting.\n";
        return(1);
    }
    return(0);
}

/***********************************************************************/
/* created 11/6/99 */
void function_to_eliminate_gcc_warning()
{
  yyunput(0,"");
}

/***********************************************************************/
